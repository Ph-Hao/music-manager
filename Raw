import { Routes } from '@angular/router';
import { SongManagerComponent } from '../components/manage/song-manager/song-manager.component';
import { PlaylistManagerComponent } from '../components/manage/playlist-manager/playlist-manager.component';
import { SongPlayerComponent } from '../components/song-player/song-player.component';

export const routes: Routes = [
  { path: '', component: SongManagerComponent, title: 'Home' },
  // { path: 'song', component: SongManagerComponent, title: 'Song' },
  // { path: 'playlist', component: PlaylistManagerComponent, title: 'Playlist' },
  // { path: '', redirectTo: '/', pathMatch: 'full' },
  //   { path: 'song-player', component: SongPlayerComponent, title: '' },
];

=======================
<!-- <aside>
  <section class="aside-container">
    <button class="aside-btn" routerLink="/">Home</button>
    <button class="aside-btn" routerLink="/song">Songs</button>
    <button class="aside-btn" routerLink="/playlist">Playlists</button>
    <button class="aside-btn">Albums</button>
  </section>
</aside> -->
<!-- <div id="aside-anchor">
  <aside id="aside-container">
    <button (click)="scrollToSection('home')" class="active">Home</button>
    <button (click)="scrollToSection('song-manager')">Songs</button>
    <button (click)="scrollToSection('playlist-manager')">Playlists</button>
    <button>Albums</button>
  </aside>
</div> -->
<div id="aside-anchor">
  <aside id="aside-container">
    <button
      (click)="scrollToSection('home')"
      [class.active]="activeSection === 'home'"
    >
      Home
    </button>
    <button
      (click)="scrollToSection('song-manager')"
      [class.active]="activeSection === 'song-manager'"
    >
      Songs
    </button>
    <button
      (click)="scrollToSection('playlist-manager')"
      [class.active]="activeSection === 'playlist-manager'"
    >
      Playlists
    </button>
    <button
      (click)="scrollToSection('albums')"
      [class.active]="activeSection === 'albums'"
    >
      Albums
    </button>
  </aside>
</div>
============
#aside-anchor {
  position: relative;
  aside {
    width: 15%;
    background-color: white;
    position: absolute;
    top: 0;
    left: 0;
    button {
      width: 100%;
      background-color: transparent;
      font-size: larger;
      padding: 10px;
      border: none;
      &:hover {
        background-color: aliceblue;
      }
      &.active {
        background-color: aliceblue;
      }
    }
  }
}
==============
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-aside',
  templateUrl: './aside.component.html',
  styleUrls: ['./aside.component.scss'],
  standalone: true,
  imports: [CommonModule],
})
export class AsideComponent implements OnInit {
  activeSection: string = 'home';

  scrollToSection(sectionId: string): void {
    const section = document.getElementById(sectionId);
    if (section) {
      section.scrollIntoView({ behavior: 'smooth' });
    }
  }

  ngOnInit(): void {
    window.addEventListener('scroll', this.handleScroll.bind(this));
  }

  // handleScroll(): void {
  //   // console.log('ss');
  //   const aside = document.getElementById('aside-container') as HTMLElement;
  //   const headerHeight: number = 100;

  //   const scrollTop: number =
  //     window.scrollY || document.documentElement.scrollTop;

  //   if (scrollTop > headerHeight) {
  //     aside.style.position = 'fixed';
  //     aside.style.top = '0';
  //   } else {
  //     aside.style.position = 'absolute';
  //     aside.style.top = '0';
  //   }
  // }

  handleScroll(): void {
    const aside = document.getElementById('aside-container') as HTMLElement;
    const headerHeight: number = 100;
    const scrollTop: number =
      window.scrollY || document.documentElement.scrollTop;

    if (scrollTop > headerHeight) {
      aside.style.position = 'fixed';
      aside.style.top = '0';
    } else {
      aside.style.position = 'absolute';
      aside.style.top = '0';
    }

    const sections = ['home', 'song-manager', 'playlist-manager', 'albums'];
    const windowHeight = window.innerHeight;

    if (scrollTop === 0) {
      this.activeSection = 'home';
      return;
    }

    let activeSection: string = '';

    sections.forEach((sectionId) => {
      const section = document.getElementById(sectionId);
      if (section) {
        const sectionTop = section.getBoundingClientRect().top + scrollTop;
        const sectionHeight = section.offsetHeight;

        if (
          scrollTop >= sectionTop - windowHeight / 2 &&
          scrollTop < sectionTop + sectionHeight - windowHeight / 2
        ) {
          activeSection = sectionId;
        }
      }
    });

    if (activeSection) {
      this.activeSection = activeSection;
    }
  }
}
=====================
<div id="aside-anchor">
  <aside id="aside-container">
    <button (click)="scrollToSection('home')">Home</button>
    <button (click)="scrollToSection('song-manager')">Songs</button>
    <button (click)="scrollToSection('playlist-manager')">Playlists</button>
    <button>Albums</button>
    <section><app-song-player></app-song-player></section>
  </aside>
</div>
<!-- <div id="aside-anchor">
  <aside id="aside-container">
    <button
      (click)="scrollToSection('home')"
      [class.active]="activeSection === 'home'"
    >
      Home
    </button>
    <button
      (click)="scrollToSection('song-manager')"
      [class.active]="activeSection === 'song-manager'"
    >
      Songs
    </button>
    <button
      (click)="scrollToSection('playlist-manager')"
      [class.active]="activeSection === 'playlist-manager'"
    >
      Playlists
    </button>
    <button
      (click)="scrollToSection('albums')"
      [class.active]="activeSection === 'albums'"
    >
      Albums
    </button>
  </aside>
</div> -->
==============

#aside-anchor {
  position: relative;
  aside {
    width: 15%;
    background-color: white;
    position: absolute;
    top: 0;
    left: 0;
    button {
      width: 100%;
      background-color: transparent;
      font-size: larger;
      padding: 10px;
      border: none;
      &:hover {
        background-color: aliceblue;
      }
    }
  }
}
==========
import { Component } from '@angular/core';
import { SongPlayerComponent } from '../song-player/song-player.component';
import { RouterLink, RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-aside-song-play',
  standalone: true,
  imports: [SongPlayerComponent, RouterOutlet, RouterLink],
  templateUrl: './aside-song-play.component.html',
  styleUrl: './aside-song-play.component.scss',
})
export class AsideSongPlayComponent {
  activeSection: string = 'home';

  scrollToSection(sectionId: string): void {
    const section = document.getElementById(sectionId);
    if (section) {
      section.scrollIntoView({ behavior: 'smooth' });
    }
  }

  ngOnInit(): void {
    window.addEventListener('scroll', this.handleScroll.bind(this));
  }

  // handleScroll(): void {
  //   // console.log('ss');
  //   const aside = document.getElementById('aside-container') as HTMLElement;
  //   const headerHeight: number = 100;

  //   const scrollTop: number =
  //     window.scrollY || document.documentElement.scrollTop;

  //   if (scrollTop > headerHeight) {
  //     aside.style.position = 'fixed';
  //     aside.style.top = '0';
  //   } else {
  //     aside.style.position = 'absolute';
  //     aside.style.top = '0';
  //   }
  // }

  handleScroll(): void {
    const aside = document.getElementById('aside-container') as HTMLElement;
    const headerHeight: number = 100;
    const scrollTop: number =
      window.scrollY || document.documentElement.scrollTop;

    if (scrollTop > headerHeight) {
      aside.style.position = 'fixed';
      aside.style.top = '0';
    } else {
      aside.style.position = 'absolute';
      aside.style.top = '0';
    }

    //   const sections = ['home', 'song-manager', 'playlist-manager', 'albums'];
    //   const windowHeight = window.innerHeight;

    //   if (scrollTop === 0) {
    //     this.activeSection = 'home';
    //     return;
    //   }

    //   let activeSection: string = '';

    //   sections.forEach((sectionId) => {
    //     const section = document.getElementById(sectionId);
    //     if (section) {
    //       const sectionTop = section.getBoundingClientRect().top + scrollTop;
    //       const sectionHeight = section.offsetHeight;

    //       if (
    //         scrollTop >= sectionTop - windowHeight / 2 &&
    //         scrollTop < sectionTop + sectionHeight - windowHeight / 2
    //       ) {
    //         activeSection = sectionId;
    //       }
    //     }
    //   });

    //   if (activeSection) {
    //     this.activeSection = activeSection;
    //   }
  }
}
========
<footer>
  <h6>Copyright 2014 TMA Solutions</h6>
</footer>
===========
footer {
  text-align: center;
  width: 100%;
  background-color: #f1f1f1;
  bottom: 0;
  position: fixed;
  left: 0;
  padding: 10px;
}
import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  standalone: true,
  imports: [],
  templateUrl: './footer.component.html',
  styleUrl: './footer.component.scss'
})
export class FooterComponent {

}
===========
<header id="home" class="section">
  <img src="/img/music-icon.png" alt="music-icon" routerLink="/" />
  <h1 routerLink="/">Spotifier</h1>
</header>
============
header {
  height: 100px;
  display: flex;
  background-color: rgb(236, 222, 255);
  img {
    cursor: pointer;
  }
  h1 {
    color: rgb(241, 124, 124);
    padding: 25px 0 25px 0;
    cursor: pointer;
  }
}
=============

import { Component } from '@angular/core';
import { RouterLink } from '@angular/router';
@Component({
  selector: 'app-header',
  standalone: true,
  imports: [RouterLink],
  templateUrl: './header.component.html',
  styleUrl: './header.component.scss',
})
export class HeaderComponent {}
=============

<div id="playlist-manager" class="section">
  <app-nav-playlist
    (deletePlaylistsEvent)="deleteSelectedPlaylists()"
  ></app-nav-playlist>
  <app-playlist-table></app-playlist-table>
</div>
============
div {
  width: 85%;
  float: right;
  padding-top: 100px;
}
===
import { Component, ViewChild } from '@angular/core';
import { NavPlaylistComponent } from '../../nav/nav-playlist/nav-playlist.component';
import { PlaylistTableComponent } from '../../playlist-table/playlist-table.component';

@Component({
  selector: 'app-playlist-manager',
  standalone: true,
  imports: [NavPlaylistComponent, PlaylistTableComponent],
  templateUrl: './playlist-manager.component.html',
  styleUrl: './playlist-manager.component.scss',
})
export class PlaylistManagerComponent {
  @ViewChild(PlaylistTableComponent) playlistTable!: PlaylistTableComponent;
  constructor() {}

  deleteSelectedPlaylists(): void {
    this.playlistTable.deleteSelectedPlaylists();
  }
}
====
<div id="song-manager" class="section">
  <app-nav-song
    (deleteSongsEvent)="deleteSelectedSongs()"
    (showAddSongModalEvent)="showAddSongModal()"
    (searchEvent)="handleSearch($event)"
  ></app-nav-song>
  <!-- <app-song-table
  (editSongEvent)="editSong($event)"
  (playSongEvent)="handlePlaySongEvent()"
></app-song-table> -->
  <app-song-table (editSongEvent)="editSong($event)"></app-song-table>
  <app-song-modal (reloadTableEvent)="reloadTable($event)"></app-song-modal>
</div>
===
div {
  width: 85%;
  float: right;
  padding-bottom: 170px;
}

==
import { Component, ViewChild, Output, EventEmitter } from '@angular/core';
import { SongTableComponent } from '../../song-table/song-table.component';
import { NavSongComponent } from '../../nav/nav-song/nav-song.component';
import { SongModalComponent } from '../../modals/song-modal/song-modal.component';
import { Song } from '../../../models/song.model';

@Component({
  selector: 'app-song-manager',
  standalone: true,
  imports: [NavSongComponent, SongTableComponent, SongModalComponent],
  templateUrl: './song-manager.component.html',
  styleUrl: './song-manager.component.scss',
})
export class SongManagerComponent {
  @ViewChild(SongTableComponent) songTable!: SongTableComponent;
  @ViewChild(SongModalComponent) songModal!: SongModalComponent;
  // @Output() playSongEvent = new EventEmitter<void>();
  @ViewChild(NavSongComponent) navSong!: NavSongComponent;

  deleteSelectedSongs(): void {
    this.songTable.deleteSelectedSongs();
  }

  showAddSongModal() {
    this.songModal.handleAddSong();
  }

  editSong(song: Song): void {
    this.songModal.handleEditSong(song);
  }

  reloadTable(song: Song) {
    this.songTable.modifySongTable(song);
  }

  handleSearch(searchKey: string) {
    this.songTable.filterSongs(searchKey);
  }

  // handlePlaySongEvent() {
  //   this.playSongEvent.emit();
  // }
}
====
<div *ngIf="action !== 'none'" class="modal-overlay">
  <div class="modal">
    <div class="modal-header">
      <h2>Add New Song</h2>
      <button class="close-button" (click)="handleCloseSongModal()">X</button>
    </div>
    <div class="modal-body">
      <input type="text" placeholder="Song Name" [(ngModel)]="song!.name" />
      <p class="error" *ngIf="errors[0]">{{ errors[0] }}</p>

      <input type="text" placeholder="Artist" [(ngModel)]="song!.artist" />
      <p class="error" *ngIf="errors[1]">{{ errors[1] }}</p>

      <input type="text" placeholder="Album" [(ngModel)]="song!.album" />
      <input type="number" placeholder="Year" [(ngModel)]="song!.year" />
      <p class="error" *ngIf="errors[2]">{{ errors[2] }}</p>
      <input type="audio" placeholder="audio link" [(ngModel)]="song!.audio" />
    </div>
    <div class="modal-footer">
      <button class="submit-button" (click)="handleSaveChange()">
        Save Changes
      </button>
      <button class="close-button" (click)="handleCloseSongModal()">
        Close
      </button>
    </div>
  </div>
</div>
=============

$modal-bg-color: white;
$modal-shadow-color: rgba(0, 0, 0, 0.3);
$primary-color: #007bff;
$error-color: red;
$close-button-bg-color: #ccc;

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;

  .modal {
    background: $modal-bg-color;
    border-radius: 8px;
    padding: 20px;
    width: 400px;
    box-shadow: 0 2px 10px $modal-shadow-color;

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;

      .close-button {
        background-color: transparent;
        border: none;
        &:hover {
          background-color: #ccc;
        }
      }
    }

    .modal-body {
      margin-top: 20px;

      input {
        width: 95%;
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      .error {
        color: $error-color;
        font-size: 0.9em;
      }
    }

    .modal-footer {
      margin-top: 20px;
      display: flex;
      justify-content: flex-end;

      .submit-button,
      .close-button {
        padding: 10px 15px;
        margin-left: 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .submit-button {
        background-color: $primary-color;
        color: white;
      }

      .close-button {
        background-color: $close-button-bg-color;
      }
    }
  }
}

====
import { Component, EventEmitter, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SongService } from '../../../services/song.service';
import { Song } from '../../../models/song.model';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-song-modal',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './song-modal.component.html',
  styleUrls: ['./song-modal.component.scss'],
})
export class SongModalComponent {
  @Output() reloadTableEvent = new EventEmitter<Song>();

  action: string = 'none';

  song: Song = {
    name: '',
    artist: '',
    album: '',
    year: '',
    audio: '',
  };

  errors: string[] = [];

  constructor(private songService: SongService) {}

  resetSong(): void {
    this.song = {
      name: '',
      artist: '',
      album: '',
      year: '',
      audio: '',
    };
  }

  handleAddSong(): void {
    console.log('from song modal');
    this.action = 'add';
    this.resetSong();
  }

  handleEditSong(editSong: Song): void {
    console.log('from song modal to edit:', editSong);
    this.action = 'edit';
    this.song = { ...editSong };
  }

  handleCloseSongModal(): void {
    console.log('from song modal');
    this.action = 'none';
    this.resetSong();
  }

  validate(): string[] {
    const newErrors: string[] = [];
    if (!this.song?.name) newErrors[0] = 'Song name is required.';
    if (!this.song?.artist) newErrors[1] = 'Artist is required.';
    if (!this.song?.year) newErrors[2] = 'Year is required.';
    else if (
      isNaN(this.song?.year) ||
      this.song?.year < 1900 ||
      this.song?.year > new Date().getFullYear()
    ) {
      newErrors[3] = 'Please enter a valid year.';
    }

    return newErrors;
  }

  handleSaveChange(): void {
    this.errors = this.validate();
    if (this.action === 'add') {
      if (this.song && this.errors.length === 0) {
        try {
          this.songService.addSong(this.song).subscribe(() => {
            this.handleCloseSongModal();
          });
        } catch (error) {
          console.error('Error adding song:', error);
        }
      }
    } else if (this.action === 'edit' && this.song?.id) {
      if (this.song && this.errors.length === 0) {
        try {
          this.songService.updateSong(this.song.id, this.song).subscribe(() => {
            this.handleCloseSongModal();
          });
        } catch (error) {
          console.error('Error updating song:', error);
        }
      }
    }

    this.reloadTableEvent.emit(this.song);
  }
}
===
<section id="functionally">
    <nav>
      <ul id="left">
        <h2>Manage playlist</h2>
      </ul>
      <ul id="right">
        <button onClick="">
          <img src="/img/add-icon.png" alt="add-playlist-icon" />
          Add
        </button>
        <button (click)="deletePlaylists()" >
          <img src="/img/delete-icon.png" alt="delete-playlist-icon"  />
          Delete
        </button>
  
        <button onClick=>
          <img src="/img/search-icon.png" alt="search-playlist-icon" />
              Search   
          </button>
  
        <!-- <div className="search-container">
          <input
            type="text"
            className="search-input"
            placeholder="Search for a playlist..."
            onChange="{onSearchChange}"
          />
        </div> -->
      </ul>
    </nav>
  </section>
  ===
nav {
  height: 50px;
  background-color: rgb(210, 244, 255);
  align-items: center;
  display: flex;
  padding: 0;
  #right {
    margin-left: auto;
    padding: 15px;
    display: flex;
  }

  .search-input {
    width: 300px;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }

  ul {
    display: flex;
    list-style: none;
  }

  h2 {
    float: left;
    margin-left: 5px;
  }

  button {
    font-size: large;
    color: #686868;
    height: 50px;
    width: 100px;
    background-color: transparent;
    border: none;

    img {
      width: 25px;
      height: 25px;
      vertical-align: middle;
    }

    &:hover {
      background-color: rgb(255, 255, 255);
    }
  }
}
===
import { Component, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-nav-playlist',
  standalone: true,
  imports: [],
  templateUrl: './nav-playlist.component.html',
  styleUrl: './nav-playlist.component.scss',
})
export class NavPlaylistComponent {
  @Output() deletePlaylistsEvent = new EventEmitter<void>();

  deletePlaylists = (): void => {
    this.deletePlaylistsEvent.emit();
  };
}
======
<section id="functionally">
  <nav>
    <ul id="left">
      <h2>Manage songs</h2>
    </ul>
    <ul *ngIf="!openSearch" id="right">
      <button (click)="showAddSongModal()">
        <img src="/img/add-icon.png" alt="add-playlist-icon" />
        Add
      </button>
      <button (click)="deleteSongs()">
        <img src="/img/delete-icon.png" alt="delete-playlist-icon" />
        Delete
      </button>

      <button (click)="handleOpenSearch()">
        <img src="/img/search-icon.png" alt="search-playlist-icon" />
        Search
      </button>
    </ul>
    <ul *ngIf="openSearch" id="right">
      <button (click)="deleteSongs()">
        <img src="/img/delete-icon.png" alt="delete-playlist-icon" />
        Delete
      </button>

      <button (click)="handleOpenSearch()">
        <img src="/img/search-icon.png" alt="search-playlist-icon" />
        Close
      </button>
      <div class="search-container">
        <input
          type="text"
          class="search-input"
          placeholder="Search for a song..."
          [(ngModel)]="searchKey"
          (ngModelChange)="handleSearch()"
        />
      </div>
    </ul>
  </nav>
</section>
===
nav {
  height: 50px;
  background-color: rgb(210, 244, 255);
  align-items: center;
  display: flex;
  padding: 0;
  justify-content: center;
  #right {
    margin-left: auto;
    padding: 15px;
    display: flex;
  }

  ul {
    display: flex;
    list-style: none;
  }

  h2 {
    float: left;
    margin-left: 5px;
  }

  button {
    font-size: large;
    color: #686868;
    height: 50px;
    width: 100px;
    background-color: transparent;
    border: none;

    img {
      width: 25px;
      height: 25px;
      vertical-align: middle;
    }

    &:hover {
      background-color: rgb(255, 255, 255);
    }
  }
  .search-container {
    display: flex;
    justify-content: center;
    padding: 10px;
    .search-input {
      width: 300px;

      border: 1px solid #ccc;
      border-radius: 4px;
    }
  }
}
===
import { Component, EventEmitter, Output } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-nav-song',
  standalone: true,
  imports: [FormsModule, CommonModule],
  templateUrl: './nav-song.component.html',
  styleUrls: ['./nav-song.component.scss'],
})
export class NavSongComponent {
  @Output() deleteSongsEvent = new EventEmitter<void>();
  @Output() showAddSongModalEvent = new EventEmitter<void>();
  @Output() searchEvent = new EventEmitter<string>();

  openSearch: boolean = false;
  searchKey: string = '';

  deleteSongs(): void {
    this.deleteSongsEvent.emit();
  }

  showAddSongModal(): void {
    this.showAddSongModalEvent.emit();
  }

  handleOpenSearch() {
    this.openSearch = !this.openSearch;
    if (!this.openSearch) {
      this.searchKey = '';
      this.handleSearch();
    }
  }

  handleSearch() {
    this.searchEvent.emit(this.searchKey);
  }
}
====
<div id="table-container">
  <table id="table">
    <thead>
      <tr id="fixed-title">
        <th class="checkBox-column">
          <input
            id="checkBoxAll"
            type="checkbox"
            [(ngModel)]="checkBoxAll"
            (change)="handleCheckBoxAll()"
          />
        </th>
        <th class="name-column">Name</th>
        <th class="song-column">Songs</th>
        <th class="action-column">Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr
        *ngFor="let playlist of getPlaylists; let i = index"
        [attr.key]="playlist.id"
      >
        <td class="checkBox-column">
          <input type="checkbox" [(ngModel)]="playlist.check" />
        </td>
        <td>{{ playlist.name }}</td>
        <td>
          <div *ngIf="playlist.songs.length > 1">
            <div>{{ playlist.songs.length }}</div>

            <div>
              <button (click)="handlePrevSong(playlist)">&#60;</button>
              {{ playlist.songs[playlist.songIterator].name }}
              <button (click)="handleNextSong(playlist)">&#62;</button>
            </div>
          </div>
          <div *ngIf="playlist.songs.length === 1">
            <div>
              {{ playlist.songs[playlist.songIterator].name }}
            </div>
          </div>
          <div *ngIf="playlist.songs.length === 0">No songs</div>
        </td>
        <td>
          <button (click)="playSong(playlist)">
            <img src="/img/play-icon.png" alt="play-song-icon" />
            Play
          </button>
          <button (click)="editPlaylist(playlist)">
            <img src="/img/edit-icon.png" alt="edit-playlist-icon" />
            Edit
          </button>
          <button (click)="deletePlaylist(playlist.id)">
            <img src="/img/delete-icon.png" alt="delete-playlist-icon" />
            Delete
          </button>
        </td>
      </tr>
    </tbody>
  </table>
  <div *ngIf="errorMessage">{{ errorMessage }}</div>
</div>
==
#table-container {
  height: 650px;
  overflow-x: auto;
  overflow-y: auto;
  border: 1px solid #838383;
  // width: 85%;
  // float: right;

  table {
    width: 100%;
    border: #686868 1px solid;

    #fixed-title {
      position: sticky;
      top: 0;
      background-color: whitesmoke;
    }

    th {
      padding: 10px 0;
    }

    td {
      text-align: center;
    }

    tr {
      &:nth-child(even) {
        background-color: #e7e7e7;
      }
    }

    .action-column {
      width: 20%;
    }

    .checkBox-column {
      width: 3%;
    }
    .name-column {
      width: 30%;
    }

    button {
      background-color: transparent;
      border: none;
      height: 38px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0 15px;
      cursor: pointer;

      img {
        width: 20px;
        height: 20px;
        margin: 3px;
      }

      &:hover {
        background-color: rgb(211, 211, 211);
      }
    }
  }
}
===
import { Component, OnInit } from '@angular/core';
import { Playlist } from '../../models/playlist.model';
import { PlaylistService } from '../../services/playlist.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { PlaylistApiService } from '../../services/playlist-api.service';
import { map } from 'rxjs';

@Component({
  selector: 'app-playlist-table',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './playlist-table.component.html',
  styleUrls: ['./playlist-table.component.scss'],
})
export class PlaylistTableComponent implements OnInit {
  errorMessage: string | null = null;
  private playlists: Playlist[] = [];
  public checkBoxAll: boolean = false;

  constructor(
    private playlistService: PlaylistService,
    private playlistApiService: PlaylistApiService
  ) {}

  get getPlaylists() {
    return this.playlists;
  }

  // private loadPlaylists(): void {
  //   try {
  //     this.playlistService.loadPlaylists();
  //     this.playlists = this.playlistService.allPlaylists;
  //   } catch (error) {
  //     this.errorMessage = 'Network problem!';
  //     throw new Error(this.errorMessage);
  //   }
  // }

  loadPlaylists = (): void => {
    try {
      this.playlistApiService
        .getPlaylists()
        .pipe(
          map((data: Playlist[]) => {
            data.forEach((playlist) => {
              if (playlist.songs.length > 0) {
                playlist.check = false;
                playlist.songIterator = 0;
              }
            });
            console.log(data);
            return data;
          })
        )
        .subscribe((data) => (this.playlists = data));
    } catch (error) {
      throw new Error('Network problem!');
    }
  };

  ngOnInit(): void {
    // this.playlistService.loadPlaylists();
    this.loadPlaylists();
  }

  playSong(playlist: Playlist) {
    this.playlistService.playSong(playlist);
  }

  addToPlaylist(playlist: Playlist) {
    this.playlistService.addToPlaylist(playlist);
  }

  editPlaylist(playlist: Playlist) {
    this.playlistService.editPlaylist(playlist);
  }

  deletePlaylist(id: string) {
    try {
      this.playlistService.deletePlaylist(id);
      this.playlists = this.playlists.filter((playlist) => playlist.id !== id);
    } catch (error) {
      new Error('Cannot delete!');
    }
  }

  handlePrevSong(playlist: Playlist) {
    this.playlistService.handlePrevSong(playlist);
  }

  handleNextSong(playlist: Playlist) {
    this.playlistService.handleNextSong(playlist);
  }

  deleteSelectedPlaylists(): void {
    this.playlistService.deletePlaylists();
    this.playlists = this.playlistService.allPlaylists;
    this.checkBoxAll = this.playlistService.getCheckBoxAll;
  }

  handleCheckBoxAll(): void {
    this.playlistService.handleCheckBoxAll(this.checkBoxAll);
  }
}
===
<div class="player-container">
  <section class="icon-section">
    <img src="/img/dvd-icon.png" alt="player-icon" />
  </section>
  <section>
    <h3>{{ song.name }}</h3>
    <h5>{{ song.artist }}</h5>
  </section>

  <audio hidden>
    <source [src]="song.audio" type="audio/mpeg" />
  </audio>

  <div class="time-control">
    <input
      type="range"
      [min]="0"
      [max]="totalDuration"
      [value]="currentTime"
      (input)="seekTo($event)"
    />
  </div>

  <div class="volume-control">
    <button (click)="toggleMute()">
      <img *ngIf="!isMuted" src="/img/volume-icon.png" alt="Volume Icon" />
      <img *ngIf="isMuted" src="/img/mute-icon.png" alt="Mute Icon" />
    </button>
    <input
      type="range"
      id="volume"
      min="0"
      max="1"
      step="0.01"
      [value]="currentVolume"
      (input)="changeVolume($event)"
      orient="vertical"
    />
  </div>
  <div class="song-option">
    <button (click)="playRandomSong()">
      <img src="/img/random.png" alt="" />
    </button>
    <button (click)="toggleRepeat()">
      <img *ngIf="isRepeat" src="/img/repeat.png" alt="" />
      <img *ngIf="!isRepeat" src="/img/unrepeat.png" alt="" />
    </button>
  </div>
  <div class="song-control">
    <button (click)="previousSong()">
      <img src="/img/prev-icon.png" alt="" />
    </button>
    <button (click)="togglePlay()">
      <img *ngIf="isPlaying" src="/img/pause-icon.png" alt="" />
      <img *ngIf="!isPlaying" src="/img/play-song-icon.png" alt="" />
    </button>
    <button (click)="nextSong()">
      <img src="/img/next-icon.png" alt="" />
    </button>
  </div>
  <!-- <section class="list-to-play">
    <h3>Playlist Songs:</h3>
    <div className="song-list"></div>
  </section> -->
</div>
===
.player-container {
  justify-content: center;
  align-items: center;
  text-align: center;
  // width: 15%;

  .icon-section {
    display: flex;
    justify-content: center;
    img {
      width: 90%;
      padding-top: 15px;
    }
  }

  .time-control {
    input {
      margin: 5px;
      width: 80%;
      // height: 8px;
      // appearance: none;
      // background: #ccc;
      // border-radius: 5px;
      // outline: none;
      // cursor: pointer;
    }
  }

  .volume-control {
    display: flex;
    justify-content: center;
    input: {
      width: 50%;
    }
    button {
      width: 10%;
      background-color: transparent;
      border: none;
      cursor: pointer;
      img {
        width: 100%;
      }
    }
  }

  .song-control {
    display: flex;
    justify-content: center;

    button {
      width: 20%;
      margin: 5px;
      background-color: transparent;
      border: none;
      cursor: pointer;
      img {
        width: 100%;
      }
    }
  }

  .song-option {
    display: flex;
    justify-content: center;

    button {
      width: 15%;
      margin: 5px;
      background-color: transparent;
      border: none;
      cursor: pointer;
      img {
        width: 100%;
      }
    }
  }

  // .list-to-play {
  //   height: 200px;
  //   background-color: aqua;
  // }
}

==
import { Component, EventEmitter, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Song } from '../../models/song.model';
import { SongPlayerManagerService } from '../../services/song-player-manager.service';

@Component({
  selector: 'app-song-player',
  standalone: true,
  templateUrl: './song-player.component.html',
  styleUrls: ['./song-player.component.scss'],
  imports: [CommonModule, FormsModule],
})
export class SongPlayerComponent {
  song: Song = {
    name: '',
    artist: '',
    album: '',
    year: '',
    audio: '',
  };
  songs: Song[] = [];

  currentSongIndex = 0;
  isMuted = false;
  isPlaying = false;
  isRepeat = false;
  currentTime = 0;
  totalDuration = 0;
  currentVolume = 1;
  previousVolume = this.currentVolume;

  audioPlayer!: HTMLAudioElement;

  constructor(private songPlayerManager: SongPlayerManagerService) {}

  ngOnInit() {
    this.song = this.songPlayerManager.getSong;
    this.songs = this.songPlayerManager.getSongs;
    this.currentSongIndex = this.songs.findIndex(
      (song) => song.id === this.song.id
    );
    this.audioPlayer = new Audio(this.song.audio);
    this.playSong();

    this.audioPlayer.addEventListener('loadedmetadata', () => {
      this.totalDuration = this.audioPlayer.duration;
    });

    this.audioPlayer.addEventListener('timeupdate', () => {
      this.currentTime = this.audioPlayer.currentTime;
    });

    this.audioPlayer.addEventListener('ended', () => {
      this.nextSong();
    });

    this.audioPlayer.volume = this.currentVolume;

    this.songPlayerManager.songChanged.subscribe((song: Song) => {
      this.song = song;
      this.audioPlayer.src = this.song.audio;
      this.audioPlayer.load();
      this.playSong();
      this.currentSongIndex = this.songs.findIndex(
        (song) => song.id === this.song.id
      );
    });
  }

  playSong() {
    this.audioPlayer.play();
    this.isPlaying = true;
  }

  pauseSong() {
    this.audioPlayer.pause();
    this.isPlaying = false;
  }

  toggleMute() {
    this.isMuted = !this.isMuted;

    if (this.isMuted) {
      this.previousVolume = this.audioPlayer.volume;
      this.audioPlayer.volume = 0;
      this.currentVolume = 0;
    } else {
      this.audioPlayer.volume =
        this.previousVolume > 0 ? this.previousVolume : 1;
      this.currentVolume = this.previousVolume;
    }
  }

  toggleRepeat() {
    this.isRepeat = !this.isRepeat;
    this.audioPlayer.loop = this.isRepeat;
  }

  nextSong() {
    this.currentSongIndex = (this.currentSongIndex + 1) % this.songs.length;
    this.song = this.songs[this.currentSongIndex];
    this.loadAndPlaySongIfPlaying();
    console.log(this.currentSongIndex);
    console.log(this.song);
  }

  previousSong() {
    this.currentSongIndex =
      (this.currentSongIndex - 1 + this.songs.length) % this.songs.length;
    this.song = this.songs[this.currentSongIndex];
    this.loadAndPlaySongIfPlaying();
  }

  playRandomSong() {
    const randomIndex = Math.floor(Math.random() * this.songs.length);
    this.currentSongIndex = randomIndex;
    this.song = this.songs[this.currentSongIndex];
    this.loadAndPlayCurrentSong();
  }

  loadAndPlaySongIfPlaying() {
    this.audioPlayer.src = this.songs[this.currentSongIndex].audio;
    this.audioPlayer.load();
    if (this.isPlaying) {
      this.audioPlayer.play();
    }
  }

  loadAndPlayCurrentSong() {
    this.audioPlayer.src = this.songs[this.currentSongIndex].audio;
    this.audioPlayer.load();
    this.audioPlayer.play();
  }

  changeVolume(event: Event) {
    const input = event.target as HTMLInputElement;
    this.currentVolume = +input.value;
    if (this.currentVolume === 0) {
      this.audioPlayer.muted = true;
      this.isMuted = true;
    } else {
      this.audioPlayer.volume = this.currentVolume;
      this.audioPlayer.muted = false;
      this.isMuted = false;
    }
  }

  seekTo(event: Event) {
    const input = event.target as HTMLInputElement;
    this.audioPlayer.currentTime = +input.value;
  }

  togglePlay() {
    if (this.isPlaying) {
      this.pauseSong();
    } else {
      this.playSong();
    }
  }

  // formatTime(time: number): string {
  //   const minutes = Math.floor(time / 60);
  //   const seconds = Math.floor(time % 60)
  //     .toString()
  //     .padStart(2, '0');
  //   return `${minutes}:${seconds}`;
  // }
}
==
<div id="table-container">
  <table id="table">
    <thead>
      <tr id="fixed-title">
        <th class="checkBox-column">
          <input
            id="checkBoxAll"
            type="checkbox"
            [(ngModel)]="checkBoxAll"
            (change)="handleCheckBoxAll()"
          />
        </th>
        <th class="name-column">Name</th>
        <th class="artist-column">Artist</th>
        <th class="action-column">Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr
        *ngFor="let song of this.filteredSongs; let i = index"
        [attr.key]="song.id"
      >
        <td class="checkBox-column">
          <input type="checkbox" [(ngModel)]="song.check" />
        </td>
        <td>{{ song.name }}</td>
        <td>{{ song.artist }}</td>
        <td>
          <button (click)="playSong(song)">
            <img src="/img/play-icon.png" alt="play-song-icon" />
            Play
          </button>
          <button (click)="addToPlaylist(song)">
            <img src="/img/add-playlist-icon.png" alt="add-to-playlist-icon" />
            Add to playlists
          </button>
          <button (click)="editSong(song)">
            <img src="/img/edit-icon.png" alt="edit-song-icon" />
            Edit
          </button>
          <button (click)="deleteSong(song)">
            <img src="/img/delete-icon.png" alt="delete-song-icon" />
            Delete
          </button>
        </td>
      </tr>
    </tbody>
  </table>
  <div *ngIf="errorMessage">{{ errorMessage }}</div>
</div>
==
#table-container {
  height: 650px;
  overflow-x: auto;
  overflow-y: auto;
  border: 1px solid #838383;
  // width: 85%;
  // float: right;

  table {
    width: 100%;
    border: #686868 1px solid;

    #fixed-title {
      position: sticky;
      top: 0;
      background-color: whitesmoke;
    }

    th {
      padding: 10px 0;
    }

    td {
      text-align: center;
    }

    tr {
      &:nth-child(even) {
        background-color: #e7e7e7;
      }
    }

    .action-column {
      width: 30%;
    }

    .checkBox-column {
      width: 3%;
    }

    button {
      background-color: transparent;
      border: none;
      height: 38px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0 15px;
      cursor: pointer;

      img {
        width: 20px;
        height: 20px;
        margin: 3px;
      }

      &:hover {
        background-color: rgb(211, 211, 211);
      }
    }
  }
}

==
import {
  Component,
  EventEmitter,
  OnDestroy,
  OnInit,
  Output,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { Song } from '../../models/song.model';
import { SongService } from '../../services/song.service';
import { map } from 'rxjs';
import { FormsModule } from '@angular/forms';
import { SongPlayerManagerService } from '../../services/song-player-manager.service';
import { RouterLink, RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-song-table',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterLink, RouterOutlet],
  templateUrl: './song-table.component.html',
  styleUrls: ['./song-table.component.scss'],
})
export class SongTableComponent implements OnInit, OnDestroy {
  @Output() editSongEvent = new EventEmitter<Song>();
  // @Output() playSongEvent = new EventEmitter<void>();

  errorMessage: string | null = null;
  private songs: Song[] = [];
  checkBoxAll: boolean = false;
  filteredSongs: Song[] = [];

  constructor(
    private songService: SongService,
    private songPlayerManager: SongPlayerManagerService
  ) {}
  ngOnDestroy(): void {
    console.log('destroy');
  }

  get allSongs() {
    return this.songs;
  }

  loadSongs = (): void => {
    try {
      this.songService
        .getSongs()
        .pipe(
          map((songs: Song[]) => {
            songs.forEach((song) => {
              song.check = false;
            });
            return songs;
          })
        )
        .subscribe((data) => {
          this.songs = data;
          this.filteredSongs = data;
        });
    } catch (error) {
      throw new Error('Network problem!');
    }
  };

  filterSongs(searchKey: string) {
    if (searchKey === '') {
      this.filteredSongs = this.allSongs;
      console.log("search key = ''");
    } else
      this.filteredSongs = this.songs.filter(
        (song) =>
          song.name.toLowerCase().includes(searchKey.toLowerCase()) ||
          song.artist.toLowerCase().includes(searchKey.toLowerCase())
      );
  }

  ngOnInit(): void {
    this.loadSongs();
  }

  playSong(song: Song) {
    this.songPlayerManager.setSongs = this.allSongs;
    this.songPlayerManager.setSong = song;
    this.songPlayerManager.setOpenSongPlayer = true;
    // this.playSongEvent.emit();
  }

  addToPlaylist(song: Song) {
    console.log('Adding to playlist:', song);
  }

  editSong(song: Song) {
    console.log('Editing song:', song);
    this.editSongEvent.emit(song);
  }

  deleteSong(deleteSong: Song) {
    const cf = window.confirm('Do you want to delete this song!');
    if (cf && deleteSong.id) {
      this.songService.deleteSong(deleteSong.id).subscribe();
      this.songs = this.songs.filter((song) => song.id !== deleteSong.id);
    }
  }

  handleCheckBoxAll() {
    this.songs.forEach((song) => (song.check = this.checkBoxAll));
  }

  deleteSelectedSongs() {
    const cf = window.confirm('Do you want to delete the selected songs?');
    if (cf) {
      this.songs.forEach((song) => {
        if (song.check && song.id) {
          this.songService.deleteSong(song.id).subscribe();
        }
      });
      this.songs = this.songs.filter((song) => !song.check);
      this.songs.forEach((song) => {
        song.check = false;
      });
      this.checkBoxAll = false;
    } else {
      this.checkBoxAll = false;
      this.handleCheckBoxAll();
    }
  }

  modifySongTable(modifiedSong: Song) {
    this.loadSongs;
    const songIndex = this.songs.findIndex(
      (song) => song.id === modifiedSong.id
    );
    if (songIndex !== -1) {
      this.songs[songIndex] = { ...modifiedSong };
    } else {
      this.songs.push(modifiedSong);
    }
  }
}
==
{
  "songs": [
    {
      "id": "113",
      "name": "Summer Vibes",
      "artist": "Calvin Harris",
      "album": "Feel the Beat",
      "year": 2020,
      "audio": "../audio/EmCuaNgayHomQua.m4a"
    },
    {
      "id": "114",
      "name": "Fireworks",
      "artist": "Katy Perry",
      "album": "Fireworks",
      "year": 2011,
      "audio": "../audio/NoLie.m4a"
    },
    {
      "id": "115",
      "name": "Golden Days",
      "artist": "One Direction",
      "album": "Midnight Memories",
      "year": 2014,
      "audio": "../audio/CanYouHearTheMusic.m4a"
    },
    {
      "id": "116",
      "name": "Ocean Eyes",
      "artist": "Billie Eilish",
      "album": "Ocean Eyes",
      "year": 2016,
      "audio": "../audio/DancingInTheFlame.m4a"
    },
    {
      "id": "117",
      "name": "Blinding Lights",
      "artist": "The Weeknd",
      "album": "After Hours",
      "year": 2019,
      "audio": "../audio/EmCuaNgayHomQua.m4a"
    },
    {
      "id": "118",
      "name": "Shape of You",
      "artist": "Ed Sheeran",
      "album": "Divide",
      "year": 2017,
      "audio": "../audio/NoLie.m4a"
    },
    {
      "id": "119",
      "name": "Levitating",
      "artist": "Dua Lipa",
      "album": "Future Nostalgia",
      "year": 2020,
      "audio": "../audio/CanYouHearTheMusic.m4a"
    },
    {
      "id": "120",
      "name": "Stitches",
      "artist": "Shawn Mendes",
      "album": "Handwritten",
      "year": 2015,
      "audio": "../audio/DancingInTheFlame.m4a"
    },
    {
      "id": "121",
      "name": "Sorry",
      "artist": "Justin Bieber",
      "album": "Purpose",
      "year": 2015,
      "audio": "../audio/EmCuaNgayHomQua.m4a"
    },
    {
      "id": "122",
      "name": "Sunflower",
      "artist": "Post Malone ft. Swae Lee",
      "album": "Spider-Man: Into the Spider-Verse",
      "year": 2018,
      "audio": "../audio/NoLie.m4a"
    },
    {
      "id": "123",
      "name": "Memories",
      "artist": "Maroon 5",
      "album": "Memories",
      "year": 2019,
      "audio": "../audio/CanYouHearTheMusic.m4a"
    },
    {
      "id": "124",
      "name": "Bad Guy",
      "artist": "Billie Eilish",
      "album": "When We All Fall Asleep, Where Do We Go?",
      "year": 2019,
      "audio": "../audio/DancingInTheFlame.m4a"
    },
    {
      "id": "125",
      "name": "Roar",
      "artist": "Katy Perry",
      "album": "Prism",
      "year": 2013,
      "audio": "../audio/EmCuaNgayHomQua.m4a"
    },
    {
      "id": "126",
      "name": "Closer",
      "artist": "The Chainsmokers ft. Halsey",
      "album": "Collage",
      "year": 2016,
      "audio": "../audio/NoLie.m4a"
    },
    {
      "id": "127",
      "name": "Let Her Go",
      "artist": "Passenger",
      "album": "All the Little Lights",
      "year": 2012,
      "audio": "../audio/CanYouHearTheMusic.m4a"
    },
    {
      "id": "128",
      "name": "Senorita",
      "artist": "Shawn Mendes & Camila Cabello",
      "album": "Senorita",
      "year": 2019,
      "audio": "../audio/DancingInTheFlame.m4a"
    },
    {
      "id": "129",
      "name": "Old Town Road",
      "artist": "Lil Nas X ft. Billy Ray Cyrus",
      "album": "Old Town Road",
      "year": 2019,
      "audio": "../audio/EmCuaNgayHomQua.m4a"
    },
    {
      "id": "130",
      "name": "Havana",
      "artist": "Camila Cabello ft. Young Thug",
      "album": "Camila",
      "year": 2018,
      "audio": "../audio/NoLie.m4a"
    },
    {
      "id": "131",
      "name": "Believer",
      "artist": "Imagine Dragons",
      "album": "Evolve",
      "year": 2017,
      "audio": "../audio/CanYouHearTheMusic.m4a"
    },
    {
      "id": "132",
      "name": "Someone You Loved",
      "artist": "Lewis Capaldi",
      "album": "Divinely Uninspired to a Hellish Extent",
      "year": 2018,
      "audio": "../audio/YouAndI.m4a"
    },
    {
      "id": "133",
      "name": "Demons",
      "artist": "Imagine Dragons",
      "album": "Night Visions",
      "year": 2012,
      "audio": "../audio/EmCuaNgayHomQua.m4a"
    },
    {
      "id": "134",
      "name": "Wolves",
      "artist": "Selena Gomez & Marshmello",
      "album": "Wolves",
      "year": 2017,
      "audio": "../audio/NoLie.m4a",
      "check": false
    },
    {
      "id": "135",
      "name": "Radioactive",
      "artist": "Imagine Dragons",
      "album": "Night Visions",
      "year": 2012,
      "audio": "../audio/CanYouHearTheMusic.m4a"
    },
    {
      "id": "136",
      "name": "Lovely",
      "artist": "Billie Eilish ft. Khalid",
      "album": "Lovely",
      "year": 2018,
      "audio": "../audio/DancingInTheFlame.m4a"
    }
  ],
  "playlists": [
    {
      "id": "1",
      "name": "Wishlist",
      "songs": [
        {
          "id": "134",
          "name": "Wolves",
          "artist": "Selena Gomez & Marshmello",
          "album": "Wolves",
          "year": 2017,
          "audio": "../audio/NoLie.m4a"
        },
        {
          "id": "135",
          "name": "Radioactive",
          "artist": "Imagine Dragons",
          "album": "Night Visions",
          "year": 2012,
          "audio": "../audio/CanYouHearTheMusic.m4a"
        },
        {
          "id": "136",
          "name": "Lovely",
          "artist": "Billie Eilish ft. Khalid",
          "album": "Lovely",
          "year": 2018,
          "audio": "../audio/DancingInTheFlame.m4a"
        }
      ]
    },
    {
      "name": "Playlist 17",
      "songs": [],
      "id": "ff10"
    },
    {
      "id": "126",
      "name": "Wishlist",
      "songs": []
    },
    {
      "id": "125",
      "name": "Wishlist",
      "songs": []
    },
    {
      "id": "129",
      "name": "Wishlist",
      "songs": []
    },
    {
      "id": "120",
      "name": "Wishlist",
      "songs": []
    }
  ]
}
==
import { Song } from './song.model';

export interface Playlist {
  check: boolean;
  id: string;
  name: string;
  songs: Song[];
  songIterator: number;
}
==
export interface Song {
  check?: boolean;
  id?: string;
  name: string;
  artist: string;
  album: string;
  year: number | any;
  audio: string;
}
==
<div>
  <app-header></app-header>
  <main>
    <aside>
      <app-aside *ngIf="!openSongPlayAside"></app-aside>
      <app-aside-song-play *ngIf="openSongPlayAside"></app-aside-song-play>
    </aside>
    <app-song-manager></app-song-manager>
    <app-playlist-manager></app-playlist-manager>

    <app-footer></app-footer>
  </main>
</div>

<!-- <div>
  <div id="home" class="section">
    <app-header></app-header>
  </div>
  <main>
    <aside>
      <app-aside *ngIf="!openSongPlayAside"></app-aside>
      <app-aside-song-play *ngIf="openSongPlayAside"></app-aside-song-play>
    </aside>
    <section class="content-container">
      <section id="song-manager" class="section">
        <app-song-manager></app-song-manager>
      </section>
      <section id="playlist-manager" class="section">
        <app-playlist-manager></app-playlist-manager>
      </section>
    </section>
    <app-footer></app-footer>
  </main>
</div> -->
===
import {
  Component,
  HostListener,
  Inject,
  OnInit,
  PLATFORM_ID,
} from '@angular/core';
import { HeaderComponent } from '../../components/header/header.component';
import { AsideComponent } from '../../components/aside/aside.component';
import { FooterComponent } from '../../components/footer/footer.component';
import { NavPlaylistComponent } from '../../components/nav/nav-playlist/nav-playlist.component';
import { SongTableComponent } from '../../components/song-table/song-table.component';
import { PlaylistTableComponent } from '../../components/playlist-table/playlist-table.component';
import { NavSongComponent } from '../../components/nav/nav-song/nav-song.component';
import { PlaylistManagerComponent } from '../../components/manage/playlist-manager/playlist-manager.component';
import { SongManagerComponent } from '../../components/manage/song-manager/song-manager.component';
import { SongPlayerComponent } from '../../components/song-player/song-player.component';
import { SongPlayerManagerService } from '../../services/song-player-manager.service';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { AsideSongPlayComponent } from '../../components/aside-song-play/aside-song-play.component';
import { RouterLink, RouterOutlet } from '@angular/router';
import { fromEvent, throttleTime } from 'rxjs';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [
    HeaderComponent,
    AsideComponent,
    FooterComponent,
    NavPlaylistComponent,
    SongTableComponent,
    PlaylistTableComponent,
    NavSongComponent,
    PlaylistManagerComponent,
    SongManagerComponent,
    SongPlayerComponent,
    CommonModule,
    AsideSongPlayComponent,
    RouterLink,
    RouterOutlet,
  ],
  templateUrl: './home.component.html',
  styleUrl: './home.component.scss',
})
export class HomeComponent implements OnInit {
  openSongPlayAside: boolean = false;
  isBrowser: boolean;

  // handlePlaySong(): void {
  //   this.openSongPlayAside = true;
  //   console.log(this.openSongPlayAside);
  // }
  constructor(
    private songPlayerManager: SongPlayerManagerService,
    @Inject(PLATFORM_ID) private platformId: Object
  ) {
    this.isBrowser = isPlatformBrowser(this.platformId);

    // if (this.isBrowser) {
    //   fromEvent(window, 'scroll')
    //     .pipe(throttleTime(300))
    //     .subscribe((event) => this.onWindowScroll(event));
    // }
  }
  ngOnInit(): void {
    this.songPlayerManager.openSongPlayerChanged.subscribe((open: boolean) => {
      this.openSongPlayAside = open;
    });
  }

  // @HostListener('window:scroll', ['$event'])
  // onWindowScroll(event: Event) {
  //   if (!this.isBrowser) {
  //     return;
  //   }
  //   let scrollPosition = window.scrollY || document.documentElement.scrollTop;
  //   scrollPosition = scrollPosition + 900;
  //   const sections: NodeListOf<HTMLElement> =
  //     document.querySelectorAll('.section');
  //   const navLinks: NodeListOf<HTMLButtonElement> = document.querySelectorAll(
  //     '#aside-container button'
  //   );

  //   sections.forEach((section: HTMLElement) => {
  //     if (
  //       section.offsetTop <= scrollPosition &&
  //       section.offsetTop + section.offsetHeight > scrollPosition
  //     ) {
  //       navLinks.forEach((link: HTMLButtonElement) => {
  //         if (link.textContent?.toLowerCase().includes(section.id)) {
  //           link.classList.add('active');
  //         } else {
  //           link.classList.remove('active');
  //         }
  //       });
  //     }
  //   });
  // }
}
===
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Playlist } from '../models/playlist.model';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class PlaylistApiService {
  private PLAYLISTS_URL: string = 'http://localhost:5000/playlists';

  constructor(private http: HttpClient) {}

  getPlaylists(): Observable<Playlist[]> {
    return this.http.get<Playlist[]>(this.PLAYLISTS_URL);
  }

  addPlaylist(newPlaylist: Playlist): Observable<Playlist> {
    return this.http.post<Playlist>(this.PLAYLISTS_URL, newPlaylist);
  }

  updatePlaylist(id: string, updatedPlaylist: Playlist): Observable<Playlist> {
    return this.http.put<Playlist>(
      `${this.PLAYLISTS_URL}/${id}`,
      updatedPlaylist
    );
  }

  deletePlaylist(id: string): Observable<void> {
    return this.http.delete<void>(`${this.PLAYLISTS_URL}/${id}`);
  }
}
==
import { Injectable } from '@angular/core';
import { map } from 'rxjs';
import { Playlist } from '../models/playlist.model';
import { PlaylistApiService } from './playlist-api.service';

@Injectable({
  providedIn: 'root',
})
export class PlaylistService {
  errorMessage: string | null = null;
  private playlists: Playlist[] = [];
  private checkBoxAll: boolean = false;

  constructor(private playlistApi: PlaylistApiService) {}

  get allPlaylists() {
    return this.playlists;
  }

  get getCheckBoxAll() {
    return this.checkBoxAll;
  }

  public loadPlaylists(): void {
    try {
      this.playlistApi
        .getPlaylists()
        .pipe(
          map((data: Playlist[]) => {
            data.forEach((playlist) => {
              if (playlist.songs.length > 0) {
                playlist.check = false;
                playlist.songIterator = 0;
              }
            });
            console.log(data);
            return data;
          })
        )
        .subscribe((data) => (this.playlists = data));
    } catch (error) {
      throw new Error('Network problem!');
    }
  }

  playSong(playlist: Playlist) {
    console.log('Playing song:', playlist);
  }

  addToPlaylist(playlist: Playlist) {
    console.log('Adding to playlist:', playlist);
  }

  editPlaylist(playlist: Playlist) {
    console.log('Editing song:', playlist);
  }

  deletePlaylist(id: string): void {
    if (parseInt(id) === 1) {
      alert('Cannot delete Wishlist!');
    } else {
      let cf = window.confirm('Do you want to delete this playlist!');
      if (cf) {
        this.playlistApi.deletePlaylist(id).subscribe(() => {
          console.log('Deleted Playlist with id:', id);
        });
      }
    }
  }

  handlePrevSong(playlist: Playlist): void {
    if (playlist.songIterator === 0) {
      playlist.songIterator = playlist.songs.length - 1;
    } else {
      playlist.songIterator--;
    }
  }

  handleNextSong(playlist: Playlist): void {
    if (playlist.songIterator === playlist.songs.length - 1) {
      playlist.songIterator = 0;
    } else {
      playlist.songIterator++;
    }
  }

  deletePlaylists(): void {
    const cf = window.confirm('Do you want to delete the selected playlists?');
    if (cf) {
      let wishlist = false;
      this.playlists.forEach((playlist) => {
        if (playlist.check) {
          if (parseInt(playlist.id) !== 1) {
            this.playlistApi.deletePlaylist(playlist.id).subscribe(() => {
              console.log('Deleted Playlist with id:', playlist.id);
            });
          } else {
            wishlist = true;
          }
        }
      });

      if (wishlist) {
        alert('Cannot delete Wishlist!');
      }
      this.playlists = this.playlists.filter(
        (playlist) => !playlist.check || parseInt(playlist.id) === 1
      );
      this.playlists.forEach((playlist) => {
        playlist.check = false;
      });
      this.checkBoxAll = false;
    } else {
      this.checkBoxAll = false;
      this.handleCheckBoxAll(false);
    }
  }

  handleCheckBoxAll(check: boolean): void {
    this.playlists.forEach((playlist) => {
      playlist.check = check;
      console.log(this.checkBoxAll);
    });
  }
}

==
import { EventEmitter, Injectable } from '@angular/core';
import { Song } from '../models/song.model';

@Injectable({
  providedIn: 'root',
})
export class SongPlayerManagerService {
  private song: Song = {
    name: '',
    artist: '',
    album: '',
    year: '',
    audio: '',
  };
  private songs: Song[] = [];
  private openSongPlayer: boolean = false;
  songChanged = new EventEmitter<Song>();
  openSongPlayerChanged = new EventEmitter<boolean>();

  get getSong() {
    return this.song;
  }

  set setSong(song: Song) {
    this.song = song;
    this.songChanged.emit(this.song);
  }

  get getSongs() {
    return this.songs;
  }

  set setSongs(songs: Song[]) {
    this.songs = songs;
  }

  get getOpenSongPlayer() {
    return this.openSongPlayer;
  }

  set setOpenSongPlayer(value: boolean) {
    this.openSongPlayer = value;
    this.openSongPlayerChanged.emit(this.openSongPlayer);
  }
}

====
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Song } from '../models/song.model';

@Injectable({
  providedIn: 'root',
})
export class SongService {
  private SONGS_URL: string = 'http://localhost:5000/songs';
  private PLAYLISTS_URL: string = 'http://localhost:5000/playlists';

  constructor(private http: HttpClient) {}

  getSongs(): Observable<Song[]> {
    return this.http.get<Song[]>(this.SONGS_URL);
  }

  addSong(newSong: Song): Observable<Song> {
    return this.http.post<Song>(this.SONGS_URL, newSong);
  }

  updateSong(id: string, updatedSong: Song): Observable<Song> {
    return this.http.put<Song>(`${this.SONGS_URL}/${id}`, updatedSong);
  }

  deleteSong(id: string): Observable<void> {
    return this.http.delete<void>(`${this.SONGS_URL}/${id}`);
  }

  addSongToPlaylist(song: Song, playlistId: number): Observable<any> {
    return this.http.put(`${this.PLAYLISTS_URL}/${playlistId}`, song);
  }
}
