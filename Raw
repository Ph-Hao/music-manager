import { useState } from 'react';

export default function AddSongModal({ show, onHide, onCreatePlaylist }) {

    const [songName, setSongName] = useState('');
    const [artist, setArtist] = useState('');
    const [album, setAlbum] = useState('');
    const [year, setYear] = useState('');
    const [errors, setErrors] = useState({});


    const validate = () => {
        const newErrors = {};
        if (!songName) newErrors.songName = "Song name is required.";
        if (!artist) newErrors.artist = "Artist is required.";
        if (!album) newErrors.album = "Album is required.";
        if (!year) newErrors.year = "Year is required.";
        else if (isNaN(year) || year < 1900 || year > new Date().getFullYear()) {
            newErrors.year = "Please enter a valid year.";
        }
        return newErrors;
    };


    const handleSubmit = () => {
        const newErrors = validate();
        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
            return;
        }

        const newPlaylist = { songName, artist, album, year };
        onCreatePlaylist(newPlaylist);
        setSongName('');
        setArtist('');
        setAlbum('');
        setYear('');
        setErrors({});
    };

    if (!show) return null;

    return (
        <div className="modal-overlay">
            <div className="modal">
                <div className="modal-header">
                    <h2>Add New Song</h2>
                    <button className="close-button" onClick={onHide}>X</button>
                </div>
                <div className="modal-body">
                    <h4>song Information</h4>
                    <input
                        type="text"
                        placeholder="Song Name"
                        value={songName}
                        onChange={(e) => setSongName(e.target.value)}
                    />
                    {errors.songName && <p className="error">{errors.songName}</p>}

                    <input
                        type="text"
                        placeholder="Artist"
                        value={artist}
                        onChange={(e) => setArtist(e.target.value)}
                    />
                    {errors.artist && <p className="error">{errors.artist}</p>}

                    <input
                        type="text"
                        placeholder="Album"
                        value={album}
                        onChange={(e) => setAlbum(e.target.value)}
                    />
                    {errors.album && <p className="error">{errors.album}</p>}

                    <input
                        type="number"
                        placeholder="Year"
                        value={year}
                        onChange={(e) => setYear(e.target.value)}
                    />
                    {errors.year && <p className="error">{errors.year}</p>}
                </div>
                <div className="modal-footer">
                    <button className="submit-button" onClick={handleSubmit}>Add Song</button>
                    <button className="close-button" onClick={onHide}>Close</button>
                </div>
            </div>
        </div>
    );
}




========================================

import React, { useEffect, useState } from 'react';
import { getPlaylistsApi, getPlaylistApi, addPlaylistsApi } from '../../util/playlistsRestApi';
// import '../../scss/AddSongToPlaylistModal.scss';

export default function AddToPlaylistModal({ show, onHide, song, onAddToPlaylist }) {
    const [playlists, setPlaylists] = useState([]);
    const [selectedPlaylist, setSelectedPlaylist] = useState('');

    const fetchPlaylists = async () => {
        const data = await getPlaylistsApi();
        setPlaylists(data);
    };

    useEffect(() => {
        fetchPlaylists();
    }, []);

    const handleAdd = async () => {
        try {
            if (song && selectedPlaylist) {
                const playlist = await getPlaylistApi(selectedPlaylist);
                if (playlist.songs.filter(songInPlaylist => songInPlaylist.id === song.id).length > 0) {
                    alert('Song already added to playlist successfully!');
                    return;
                }
                await onAddToPlaylist(song, selectedPlaylist);
                onHide();
            }
        } catch (error) {
            console.error(error);
        }
    };

    const handleCreateNewPlaylist = async () => {
        const nameToUse = `Playlist ${playlists.length + 1}`;
        const newPlaylist = {
            name: nameToUse,
            songs: [song]
        };
        await addPlaylistsApi(newPlaylist);
        onHide();
        alert('Playlist created successfully!');
    };

    return (
        <div className={`add-to-playlist-modal ${show ? 'show' : ''}`} onClick={onHide}>
            <div className="add-to-playlist-modal-content" onClick={(e) => e.stopPropagation()}>
                <h2>Add to Playlist</h2>
                {playlists.length > 0 ? (
                    <>
                        <select
                            className='add-to-playlist-select'
                            value={selectedPlaylist}
                            onChange={(e) => setSelectedPlaylist(e.target.value)}
                        >
                            <option value="" disabled>Select a playlist</option>
                            {playlists.map((playlist) => (
                                <option key={playlist.id} value={playlist.id}>
                                    {playlist.name}
                                </option>
                            ))}
                        </select>
                        <div className="add-button-container">
                            <button className="add-button" onClick={handleAdd} disabled={!selectedPlaylist}>
                                Add to Playlist
                            </button>
                        </div>
                    </>
                ) : (
                    <>
                        <p style={{ textAlign: "center" }}>No playlists available. Do you want to create new playlist with this song?</p>
                        <div className="create-playlist-button-container">
                            <button className="create-playlist-button" onClick={handleCreateNewPlaylist}>
                                Create new playlist
                            </button>
                        </div>
                    </>
                )}
                <div className="button-container">
                    <button className="close-button" onClick={onHide}>Close</button>
                </div>
            </div>
        </div>
    );
}

========================================
import { useState, useEffect } from 'react';
import { getSongsApi } from '../../util/songsRestApi';

export default function CreatePlaylistModal({ show, onHide, onCreatePlaylist, playlistLength }) {
    const [playlistName, setPlaylistName] = useState('');
    const [selectedSongs, setSelectedSongs] = useState([]);
    const [songs, setSongs] = useState([]);

    useEffect(() => {
        const fetchSongs = async () => {
            try {
                const fetchedSongs = await getSongsApi();
                if (Array.isArray(fetchedSongs) && fetchedSongs.length > 0) {
                    setSongs(fetchedSongs);
                } else {
                    console.error("Fetched songs are not an array or are empty");
                }
            } catch (error) {
                console.error("Error fetching songs:", error);
            }
        };

        if (show) {
            fetchSongs();
        }
    }, [show]);

    const handleSubmit = async () => {
        const nameToUse = playlistName.trim() || `Playlist ${playlistLength + 1}`;
        const newPlaylist = {
            name: nameToUse,
            songs: selectedSongs.map(songId => {
                const song = songs.find(s => s.id === songId);
                return song ? { ...song } : null;
            }).filter(Boolean)
        };
        onCreatePlaylist(newPlaylist);
        resetFields();
        onHide();
    };

    const resetFields = () => {
        setPlaylistName('');
        setSelectedSongs([]);
    };

    const handleSongSelection = (event) => {
        const selectedOptions = Array.from(event.target.selectedOptions).map(option => option.value);
        setSelectedSongs(selectedOptions);
    };

    if (!show) return null;

    return (
        <div className="modal-overlay">
            <div className="modal">
                <div className="modal-header">
                    <h2>Create Playlist</h2>
                    <button className="close-button" onClick={onHide}>X</button>
                </div>
                <div className="modal-body">
                    <h4>Playlist Name</h4>
                    <input
                        type="text"
                        placeholder="Enter playlist name"
                        value={playlistName}
                        onChange={(e) => setPlaylistName(e.target.value)}
                    />
                    <h4>Select Songs</h4>
                    <select
                        multiple
                        value={selectedSongs}
                        onChange={handleSongSelection}
                        style={{ width: '100%', height: '100px' }}
                    >
                        {songs.length > 0 ? (
                            songs.map((song) => (
                                <option key={song.id} value={song.id}>
                                    {song.songName} | {song.artist}
                                </option>
                            ))
                        ) : (
                            <option disabled>No songs available</option>
                        )}
                    </select>
                </div>
                <div className="modal-footer">
                    <button className="submit-button" onClick={handleSubmit}>Add Playlist</button>
                    <button className="close-button" onClick={onHide}>Close</button>
                </div>
            </div>
        </div>
    );
}

======================
import { useState } from 'react';

export default function EditSongModal({ show, onHide, song, onEditSong }) {

    const [songName, setSongName] = useState(song.songName);
    const [artist, setArtist] = useState(song.artist);
    const [album, setAlbum] = useState(song.album);
    const [year, setYear] = useState(song.year);
    const [errors, setErrors] = useState({});

    const validate = () => {
        const newErrors = {};
        if (!songName) newErrors.songName = "Song name is required.";
        if (!artist) newErrors.artist = "Artist is required.";
        if (!album) newErrors.album = "Album is required.";
        if (!year) newErrors.year = "Year is required.";
        else if (isNaN(year) || year < 1900 || year > new Date().getFullYear()) {
            newErrors.year = "Please enter a valid year.";
        }
        return newErrors;
    };

    const handleSubmit = () => {
        const newErrors = validate();
        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
            return;
        }

        const updatedSong = { ...song, songName, artist, album, year };
        onEditSong(updatedSong);
        onHide();
    };

    if (!show) return null;

    return (
        <div className="modal-overlay">
            <div className="modal">
                <div className="modal-header">
                    <h2>Edit Song</h2>
                    <button className="close-button" onClick={onHide}>X</button>
                </div>
                <div className="modal-body">
                    <h4>Song Information</h4>
                    <input
                        type="text"
                        placeholder="Song Name"
                        value={songName}
                        onChange={(e) => setSongName(e.target.value)}
                    />
                    {errors.songName && <p className="error">{errors.songName}</p>}

                    <input
                        type="text"
                        placeholder="Artist"
                        value={artist}
                        onChange={(e) => setArtist(e.target.value)}
                    />
                    {errors.artist && <p className="error">{errors.artist}</p>}

                    <input
                        type="text"
                        placeholder="Album"
                        value={album}
                        onChange={(e) => setAlbum(e.target.value)}
                    />
                    {errors.album && <p className="error">{errors.album}</p>}

                    <input
                        type="number"
                        placeholder="Year"
                        value={year}
                        onChange={(e) => setYear(e.target.value)}
                    />
                    {errors.year && <p className="error">{errors.year}</p>}
                </div>
                <div className="modal-footer">
                    <button className="submit-button" onClick={handleSubmit}>Save Changes</button>
                    <button className="close-button" onClick={onHide}>Close</button>
                </div>
            </div>
        </div>
    );
}


=================
import { useState, useEffect } from 'react';
import { getSongsApi } from '../../util/songsRestApi';
import { updatePlaylistApi } from '../../util/playlistsRestApi';

export default function UpdatePlaylistModal({ show, onHide, onUpdatePlaylist, selectedPlaylist }) {
    const [playlistName, setPlaylistName] = useState('');
    const [selectedSongs, setSelectedSongs] = useState([]);
    const [songs, setSongs] = useState([]);

    useEffect(() => {
        const fetchSongs = async () => {
            try {
                const fetchedSongs = await getSongsApi();
                if (Array.isArray(fetchedSongs) && fetchedSongs.length > 0) {
                    setSongs(fetchedSongs);
                } else {
                    console.error("Fetched songs are not an array or are empty");
                }
            } catch (error) {
                console.error("Error fetching songs:", error);
            }
        };

        if (show) {
            fetchSongs();
            if (selectedPlaylist) {
                setPlaylistName(selectedPlaylist.name);
                setSelectedSongs(selectedPlaylist.songs.map(song => song.id));
            }
        }
    }, [show, selectedPlaylist]);

    const handleSubmit = async () => {
        const updatedPlaylist = {
            id: selectedPlaylist.id,
            name: playlistName.trim(),
            songs: selectedSongs.map(songId => {
                const song = songs.find(s => s.id === songId);
                return song ? { ...song } : null;
            }).filter(Boolean)
        };
        const updatedResponse = await updatePlaylistApi(selectedPlaylist.id, updatedPlaylist);
        onUpdatePlaylist(updatedResponse);
        resetFields();
        onHide();
    };

    const resetFields = () => {
        setPlaylistName('');
        setSelectedSongs([]);
    };

    const handleSongSelection = (event) => {
        const selectedOptions = Array.from(event.target.selectedOptions).map(option => option.value);
        setSelectedSongs(selectedOptions);
    };

    if (!show) return null;

    return (
        <div className="modal-overlay">
            <div className="modal">
                <div className="modal-header">
                    <h2>Update Playlist</h2>
                    <button className="close-button" onClick={onHide}>X</button>
                </div>
                <div className="modal-body">
                    <h4>Playlist Name</h4>
                    <input
                        type="text"
                        placeholder="Enter playlist name"
                        value={playlistName}
                        onChange={(e) => setPlaylistName(e.target.value)}
                    />
                    <h4>Select Songs</h4>
                    <select
                        multiple
                        value={selectedSongs}
                        onChange={handleSongSelection}
                        style={{ width: '100%', height: '100px' }}
                    >
                        {songs.length > 0 ? (
                            songs.map((song) => (
                                <option key={song.id} value={song.id}>
                                    {song.songName} | {song.artist}
                                </option>
                            ))
                        ) : (
                            <option disabled>No songs available</option>
                        )}
                    </select>
                </div>
                <div className="modal-footer">
                    <button className="submit-button" onClick={handleSubmit}>Update Playlist</button>
                    <button className="close-button" onClick={onHide}>Close</button>
                </div>
            </div>
        </div>
    );
}
=====================
import { Link } from "react-router-dom";
import SongPlayer from "./SongPlayer"

export default function Aside() {

    return (
        <aside>
            <>
                <Link
                    to='/songs'
                    style={{
                        textDecoration: 'none',
                        color: 'inherit'
                    }}
                >
                    <button>
                        Songs
                    </button>
                </Link>

                <Link
                    to='/playlists'
                    style={{
                        textDecoration: 'none',
                        color: 'inherit'
                    }}
                >
                    <button>
                        Playlist
                    </button>
                </Link>
                <SongPlayer></SongPlayer>

            </>
        </aside>
    );
}
=====================
import { Route, Routes } from 'react-router-dom';
import Aside from "./Aside";
import Direction from "./Direction";
import ManageSongs from './ManageSongs';
import ManagePlayLists from './ManagePlaylists'
import { useState } from 'react';
import Home from './Home';
import { SongProvider } from './SongContext';

export default function Main() {
  const [path, setPath] = useState('');
  const [songs, setSongsToPlay] = useState([]);



  return (
    <SongProvider>
      <main>
        <Aside />
        <section id="main-section">
          <Direction path={path} />
          <Routes>
            <Route path='/' element={<Home setPath={setPath} songs={songs.length > 0 ? songs : []} />} />
            <Route path='/songs' element={<ManageSongs setPath={setPath} setSongsToPlay={setSongsToPlay} />} />
            <Route path='/playlists' element={<ManagePlayLists setPath={setPath} />} />
          </Routes>
        </section>
      </main>
    </SongProvider>
  );
}

=========================
import { useState, useEffect } from 'react';
import {
    getPlaylistsApi,
    addPlaylistsApi,
    updatePlaylistApi,
    deletePlaylistApi
} from '../util/playlistsRestApi';
import PlaylistTable from "./PlaylistTable";
import NavPlaylist from './NavPlaylist';
import PlaylistsPagination from './PlaylistsPagination';
import CreatePlaylistModal from './modal/CreatePlaylistModal';
import UpdatePlaylistModal from './modal/UpdatePlaylistModal';

export default function ManagePlaylists({ setPath }) {

    const [playlists, setPlaylists] = useState([]);
    const [checkState, setCheckState] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [isAllChecked, setIsAllChecked] = useState(false);
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage, setItemsPerPage] = useState(14);
    const [modalShow, setModalShow] = useState(false);
    const [editModalShow, setEditModalShow] = useState(false);
    const [selectedPlaylist, setSelectedPlaylist] = useState(null);

    const fetchPlaylists = async () => {
        const data = await getPlaylistsApi();
        setPlaylists(data);
        setCheckState(Array(data.length).fill(false));
    };

    useEffect(() => {
        fetchPlaylists();
    }, []);

    useEffect(() => {
        setPath(">> Playlist");
    }, [setPath]);

    const filteredPlaylists = playlists.filter(playlist => {
        const lowercasedSearchTerm = searchTerm.toLowerCase();
        return (
            playlist.name.toLowerCase().includes(lowercasedSearchTerm) ||
            playlist.songs.length === parseInt(searchTerm)
        );
    });

    const totalPlaylists = filteredPlaylists.length;
    const startIndex = (currentPage - 1) * itemsPerPage;
    const currentPlaylists = filteredPlaylists.slice(startIndex, startIndex + itemsPerPage);

    useEffect(() => {
        if (currentPlaylists.length === 0) {
            setIsAllChecked(false);
        } else {
            const allChecked = currentPlaylists.every((_, index) => checkState[startIndex + index]);
            setIsAllChecked(allChecked);
        }
    }, [checkState, currentPlaylists, startIndex]);

    const handleCheckboxChange = (index) => {
        const updatedCheckState = [...checkState];
        updatedCheckState[startIndex + index] = !updatedCheckState[startIndex + index];
        setCheckState(updatedCheckState);
    };

    const handleToggleAll = (e) => {
        const isChecked = e.target.checked;
        const updatedCheckState = checkState.map((checked, index) => {
            const isInCurrentPage = index >= startIndex && index < startIndex + itemsPerPage;
            return isInCurrentPage ? isChecked : checked;
        });
        setCheckState(updatedCheckState);
    };

    const handleSearchChange = (e) => {
        setSearchTerm(e.target.value.trim());
        setCurrentPage(1);
        setIsAllChecked(false);
    };

    const handlePageChange = (page, newItemsPerPage) => {
        setItemsPerPage(newItemsPerPage || itemsPerPage);
        setCurrentPage(page);
    };

    const deletePlaylists = async () => {
        try {
            const idsToDelete = filteredPlaylists
                .filter((_, index) => checkState[startIndex + index])
                .map(playlist => playlist.id);

            if (idsToDelete.length === 0) {
                window.alert("No playlists selected for deletion.");
                return;
            }

            const confirmDelete = window.confirm('Are you sure you want to delete the selected playlists?');
            if (confirmDelete) {
                for (const id of idsToDelete) {
                    await deletePlaylistApi(id);
                }
                const updatedPlaylists = playlists.filter(playlist => !idsToDelete.includes(playlist.id));
                setPlaylists(updatedPlaylists);
                setCheckState(Array(updatedPlaylists.length).fill(false));
                setIsAllChecked(false);
            }
        } catch (error) {
            console.error("Failed to delete playlists", error);
        }
    };

    const deleteOnePlaylist = async (id) => {
        try {
            const confirmDelete = window.confirm('Are you sure you want to delete this playlist?');
            if (confirmDelete) {
                await deletePlaylistApi(id);
                const updatedPlaylists = playlists.filter(playlist => playlist.id !== id);
                setPlaylists(updatedPlaylists);
                setCheckState(checkState.filter((_, index) => playlists[index].id !== id));
                setIsAllChecked(false);
            }
        } catch (error) {
            console.error("Failed to delete playlist", error);
        }
    };

    const handleCreatePlaylist = async (newPlaylist) => {
        const addedPlaylist = await addPlaylistsApi(newPlaylist);
        if (addedPlaylist) {
            fetchPlaylists();
        }
    };

    const handleUpdatePlaylist = async (updatedPlaylist) => {
        await updatePlaylistApi(updatedPlaylist.id, updatedPlaylist);
        setPlaylists(prevPlaylists =>
            prevPlaylists.map(playlist => (playlist.id === updatedPlaylist.id ? updatedPlaylist : playlist))
        );
        setEditModalShow(false);
    };

    const editPlaylist = (playlist) => {
        setSelectedPlaylist(playlist);
        setEditModalShow(true);
    };

    const selectedItemsCount = checkState.filter(Boolean).length;

    return (
        <>
            <NavPlaylist
                onSearchChange={handleSearchChange}
                deletePlaylists={deletePlaylists}
                showModal={() => setModalShow(true)}
            />
            <PlaylistTable
                playlists={currentPlaylists}
                checkState={checkState}
                handleCheckboxChange={handleCheckboxChange}
                handleToggleAll={handleToggleAll}
                deleteOnePlaylist={deleteOnePlaylist}
                setEditModalShow={setEditModalShow}
                setSelectedPlaylist={editPlaylist}
                isAllChecked={isAllChecked}
            />
            <PlaylistsPagination
                totalItems={totalPlaylists}
                itemsPerPage={itemsPerPage}
                currentPage={currentPage}
                onPageChange={handlePageChange}
                selectedItemsCount={selectedItemsCount}
            />
            <CreatePlaylistModal
                show={modalShow}
                onHide={() => setModalShow(false)}
                onCreatePlaylist={handleCreatePlaylist}
                playlistLength={playlists.length}
            />
            <UpdatePlaylistModal
                show={editModalShow}
                onHide={() => setEditModalShow(false)}
                onUpdatePlaylist={handleUpdatePlaylist}
                selectedPlaylist={selectedPlaylist}
            />
        </>
    );
}


========================
import { useState, useEffect } from 'react';
import { getSongsApi, deleteSongApi, addSongApi, updateSongApi } from "../util/songsRestApi";
import SongsPagination from './SongsPagination';
import AddSongModal from './modal/AddSongModal';
import EditSongModal from './modal/EditSongModal';
import NavSong from "./NavSong";
import SongTable from "./SongTable";
import { addSongToPlaylistApi } from '../util/songsRestApi';

export default function ManageSongs({ setPath }) {
    const [songs, setSongs] = useState([]);
    const [checkState, setCheckState] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [isAllChecked, setIsAllChecked] = useState(false);
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage, setItemsPerPage] = useState(14);
    const [modalShow, setModalShow] = useState(false);
    const [editModalShow, setEditModalShow] = useState(false);
    const [selectedSong, setSelectedSong] = useState(null);

    const fetchSongs = async () => {
        const data = await getSongsApi();
        setSongs(data);
        setCheckState(Array(data.length).fill(false));
    };

    useEffect(() => {
        fetchSongs();
    }, []);


    useEffect(() => {
        setPath(">> Songs");
    }, [setPath]);

    const filteredSongs = songs.filter(song =>
        song.songName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        song.artist.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const totalSongs = filteredSongs.length;
    const startIndex = (currentPage - 1) * itemsPerPage;
    const currentSongs = filteredSongs.slice(startIndex, startIndex + itemsPerPage);

    useEffect(() => {
        const allChecked = currentSongs.every((_, index) => checkState[startIndex + index]);
        setIsAllChecked(allChecked);
    }, [checkState, currentSongs, startIndex]);


    const handleSearchChange = (e) => {
        const trimmedValue = e.target.value.trim();
        setSearchTerm(trimmedValue);
        setCurrentPage(1);
        setIsAllChecked(false);
    };

    const deleteSongs = async () => {
        try {
            const idSongs = filteredSongs
                .filter((_, index) => checkState[startIndex + index])
                .map(song => song.id);

            if (idSongs.length === 0) {
                window.alert("No songs selected for deletion.");
                return;
            }

            const confirmDelete = window.confirm('Are you sure! you want to delete the selected songs ?');
            if (confirmDelete) {
                for (const id of idSongs) {
                    await deleteSongApi(id);
                }
                const updatedSongs = songs.filter(song => !idSongs.includes(song.id));
                setSongs(updatedSongs);
                setCheckState(Array(updatedSongs.length).fill(false));
                setIsAllChecked(false);
            }
        } catch (error) {
            console.error("Failed to delete songs", error);
        }
    };

    const handleCheckboxChange = (index) => {
        const updatedCheckState = [...checkState];
        updatedCheckState[startIndex + index] = !updatedCheckState[startIndex + index];
        setCheckState(updatedCheckState);
    };

    const handleToggleAll = (e) => {
        const isChecked = e.target.checked;
        const updatedCheckState = checkState.map((checked, index) => {
            const isInCurrentPage = index >= startIndex && index < startIndex + itemsPerPage;
            return isInCurrentPage ? isChecked : checked;
        });
        setCheckState(updatedCheckState);
    };

    const deleteOneSong = async (id) => {
        try {
            const confirmDelete = window.confirm('Are you sure! you want to delete this song ?');
            if (confirmDelete) {
                await deleteSongApi(id);
                const updatedSongs = songs.filter(song => song.id !== id);
                setSongs(updatedSongs);
                setCheckState(checkState.filter((_, index) => songs[index].id !== id));
                setIsAllChecked(false);
            }
        } catch (error) {
            console.error("Failed to delete song", error);
        }
    };


    const handleAddSong = async (newSong) => {
        try {
            const addedSong = await addSongApi(newSong);
            setSongs(prevSongs => [...prevSongs, addedSong]);
            setModalShow(false);
        } catch (error) {
            console.error("Failed to add song", error);
        }
    };

    const handleEditSong = async (updatedSong) => {
        try {
            await updateSongApi(updatedSong.id, updatedSong);
            setSongs(prevSongs => prevSongs.map(song => (song.id === updatedSong.id ? updatedSong : song)));
            setEditModalShow(false);
        } catch (error) {
            console.error("Failed to edit song", error);
        }
    };

    const selectedItemsCount = checkState.filter(Boolean).length;

    const addToPlaylist = async (song, playlistId) => {
        try {
            await addSongToPlaylistApi(song, playlistId);
            alert('Song added to playlist successfully!');
        } catch (error) {
            console.error('Failed to add song to playlist:', error);
            alert('Failed to add song to playlist.');
        }
    };

    return (
        <>
            <NavSong onSearchChange={handleSearchChange} deleteSongs={deleteSongs} showModal={() => setModalShow(true)} />
            <SongTable
                currentSongs={currentSongs}
                checkState={checkState}
                startIndex={startIndex}
                handleCheckboxChange={handleCheckboxChange}
                handleToggleAll={handleToggleAll}
                deleteOneSong={deleteOneSong}
                setEditModalShow={setEditModalShow}
                setSelectedSong={setSelectedSong}
                isAllChecked={isAllChecked}
                addToPlaylist={addToPlaylist}
            />
            <SongsPagination
                totalItems={totalSongs}
                itemsPerPage={itemsPerPage}
                currentPage={currentPage}
                onPageChange={(page, newItemsPerPage) => {
                    setItemsPerPage(newItemsPerPage || itemsPerPage);
                    setCurrentPage(page);
                }}
                selectedItemsCount={selectedItemsCount}
            />
            <AddSongModal show={modalShow} onHide={() => setModalShow(false)} onAddSong={handleAddSong} />
            {selectedSong && (
                <EditSongModal
                    show={editModalShow}
                    onHide={() => setEditModalShow(false)}
                    song={selectedSong}
                    onEditSong={handleEditSong}
                />
            )}
        </>
    );
}

================
import { useState } from 'react';
import search from "../img/search-icon.png";
import add from "../img/add-icon.png";
import del from "../img/delete-icon.png";

export default function NavPlaylist({ onSearchChange, deletePlaylists, showModal }) {
    const [showSearch, setShowSearch] = useState(false);

    const toggleSearch = () => {
        setShowSearch(!showSearch);
        if (showSearch) {
            onSearchChange({ target: { value: '' } });
        }
    };

    return (
        <section id="functionally">
            <nav>
                <ul id="left">
                    <h2>Manage playlists</h2>
                </ul>
                <ul id="right">
                    {!showSearch ? (
                        <>
                            <button onClick={showModal}>
                                <img src={add} alt="add-playlist-icon" />
                                Add
                            </button>
                            <button onClick={deletePlaylists}>
                                <img src={del} alt="delete-playlist-icon" />
                                Delete
                            </button>
                        </>
                    ) : (
                        <button onClick={deletePlaylists}>
                            <img src={del} alt="delete-playlist-icon" />
                            Delete
                        </button>
                    )}
                    <button onClick={toggleSearch}>
                        <img src={search} alt="search-playlist-icon" />
                        {showSearch ? "Close" : "Search"}
                    </button>
                    {showSearch && (
                        <div className="search-container">
                            <input
                                type="text"
                                className="search-input"
                                placeholder="Search for a playlist..."
                                onChange={onSearchChange}
                            />
                        </div>
                    )}
                </ul>
            </nav>
        </section>
    );
}

==============
import { useState } from 'react';
import search from "../img/search-icon.png";
import add from "../img/add-icon.png";
import del from "../img/delete-icon.png";

export default function NavSong({ onSearchChange, deleteSongs, showModal }) {
    const [showSearch, setShowSearch] = useState(false);

    const toggleSearch = () => {
        setShowSearch(!showSearch);
        if (showSearch) {
            onSearchChange({ target: { value: '' } });
        }
    };

    return (
        <section id="functionally">
            <nav>
                <ul id="left">
                    <h2>Manage songs</h2>
                </ul>
                <ul id="right">
                    {!showSearch ? (
                        <>
                            <button onClick={showModal}>
                                <img src={add} alt="add-song-icon" />
                                Add
                            </button>
                            <button onClick={deleteSongs}>
                                <img src={del} alt="delete-song-icon" />
                                Delete
                            </button>
                        </>
                    ) : (
                        <button onClick={deleteSongs}>
                            <img src={del} alt="delete-song-icon" />
                            Delete
                        </button>
                    )}
                    <button onClick={toggleSearch}>
                        <img src={search} alt="search-song-icon" />
                        {showSearch ? "Close" : "Search"}
                    </button>
                    {showSearch && (
                        <div className="search-container">
                            <input
                                type="text"
                                className="search-input"
                                placeholder="Search for a song..."
                                onChange={onSearchChange}
                            />
                        </div>
                    )}
                </ul>
            </nav>
        </section>
    );
}

==========
function PlaylistsPagination({ totalItems, itemsPerPage, currentPage, onPageChange, selectedItemsCount }) {
    const totalPages = Math.ceil(totalItems / itemsPerPage);

    const handlePageChange = (page) => {
        if (page >= 1 && page <= totalPages) {
            onPageChange(page);
        }
    };

    return (
        <div className="pagination">
            <span>Total Items: {totalItems}</span>
            <span>Page size:
                <select
                    defaultValue={itemsPerPage}
                    onChange={(e) => onPageChange(1, e.target.value)}
                >
                    <option value={14}>14</option>
                    <option value={30}>30</option>
                    <option value={50}>50</option>
                </select>
            </span>
            <span>Selected Items: {selectedItemsCount}</span>
            <button onClick={() => handlePageChange(currentPage - 1)} disabled={currentPage === 1}>Previous</button>
            <span>{currentPage} / {totalPages}</span>
            <button onClick={() => handlePageChange(currentPage + 1)} disabled={currentPage === totalPages}>Next</button>
        </div>
    );
}

export default PlaylistsPagination;
============================
import React, { useState, useEffect } from "react";
import del from "../img/delete-icon.png";
import edit from "../img/edit-icon.png";
import play from "../img/play-icon.png";
import { useSong } from './SongContext';

export default function PlaylistTable({
    playlists,
    checkState,
    handleCheckboxChange,
    handleToggleAll,
    deleteOnePlaylist,
    setEditModalShow,
    setSelectedPlaylist,
    isAllChecked
}) {
    const [currentSongIndex, setCurrentSongIndex] = useState([]);

    const { setSongList, setCurrentSong, setShowSelectArea } = useSong();

    const handlePlay = (playlist) => {
        if (playlist.songs.length === 0) {
            alert("Playlist is empty!");
            return;
        }
        setSongList(playlist.songs);
        setCurrentSong(playlist.songs[0]);
        setShowSelectArea(true);
    };

    useEffect(() => {
        setCurrentSongIndex(playlists.map(() => 0));
    }, [playlists]);

    const handlePrevSong = (playlistIndex) => {
        setCurrentSongIndex((prevState) => {
            const newState = [...prevState];
            const totalSongs = playlists[playlistIndex].songs.length;
            if (totalSongs > 0) {
                newState[playlistIndex] = (newState[playlistIndex] - 1 + totalSongs) % totalSongs;
            }
            return newState;
        });
    };

    const handleNextSong = (playlistIndex) => {
        setCurrentSongIndex((prevState) => {
            const newState = [...prevState];
            const totalSongs = playlists[playlistIndex].songs.length;
            if (totalSongs > 0) {
                newState[playlistIndex] = (newState[playlistIndex] + 1) % totalSongs;
            }
            return newState;
        });
    };

    return (
        <div id="table-container">
            <table id="table">
                <thead>
                    <tr id="fixed-title">
                        <th className="checkBox-column">
                            <input
                                id="checkBoxAll"
                                type="checkbox"
                                checked={isAllChecked}
                                onChange={handleToggleAll}
                            />
                        </th>
                        <th className="name-column">Name</th>
                        <th className="action-column">Songs</th>
                        <th className="action-column">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {playlists.length === 0 ? (
                        <tr>
                            <td colSpan="4">No playlists found.</td>
                        </tr>
                    ) : (
                        playlists.map((playlist, index) => (
                            <tr key={playlist.id}>
                                <th>
                                    <input
                                        type="checkbox"
                                        checked={checkState[index] || false}
                                        onChange={() => handleCheckboxChange(index)}
                                    />
                                </th>
                                <td className="name-column">{playlist.name}</td>
                                <td className="songs-column" style={{ textAlign: "center" }}>
                                    {playlist.songs.length > 0 ? (
                                        <>
                                            <div>{playlist.songs.length}</div>
                                            <div>
                                                <button onClick={() => handlePrevSong(index)}>{"<"}</button>
                                                {playlist.songs[currentSongIndex[index]]?.songName || "No song"}
                                                <button onClick={() => handleNextSong(index)}>{">"}</button>
                                            </div>
                                        </>
                                    ) : (
                                        "No songs"
                                    )}
                                </td>
                                <td className="action-column">
                                    <button onClick={() => handlePlay(playlist)}>
                                        <img src={play} alt="play-song-icon" />
                                        Play
                                    </button>
                                    <button
                                        onClick={() => {
                                            setSelectedPlaylist(playlist);
                                            setEditModalShow(true);
                                        }}
                                    >
                                        <img src={edit} alt="edit-playlist-icon" />
                                        Edit
                                    </button>
                                    <button onClick={() => deleteOnePlaylist(playlist.id)}>
                                        <img src={del} alt="delete-playlist-icon" />
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        ))
                    )}
                </tbody>
            </table>
        </div>
    );
}

==================

import React, { createContext, useContext, useState } from 'react';

const SongContext = createContext();

export const useSong = () => useContext(SongContext);

export const SongProvider = ({ children }) => {
    const [currentSong, setCurrentSong] = useState(null);
    const [songList, setSongList] = useState([]);
    const [isPlaying, setIsPlaying] = useState(false);
    const [currentSongs, setCurrentSongs] = useState([]);
    const [showSelectArea, setShowSelectArea] = useState(false); // Trạng thái cho vùng chọn

    return (
        <SongContext.Provider value={{
            currentSong,
            setCurrentSong,
            songList,
            setSongList,
            isPlaying,
            setIsPlaying,
            currentSongs,
            setCurrentSongs,
            showSelectArea,
            setShowSelectArea
        }}>
            {children}
        </SongContext.Provider>
    );
};
===============
import React, { useState, useRef, useEffect } from 'react';
import { useSong } from './SongContext';
import TimeSlider from "react-input-slider";
import Slider from 'react-input-slider';
import dvd from '../img/dvd-icon.png';
import next from '../img/next-icon.png';
import prev from '../img/prev-icon.png';
import pause from '../img/pause-icon.png';
import play from '../img/play-song-icon.png';
import repeat from "../img/repeat-icon.png";
import volumeIcon from '../img/volume-icon.png';

export default function SongPlayer() {
    const audioRef = useRef(null);
    const [isPlaying, setIsPlaying] = useState(false);
    const [currentTime, setCurrentTime] = useState(0);
    const [duration, setDuration] = useState(0);
    const [volume, setVolume] = useState({ x: 50 });
    const [isRepeating, setIsRepeating] = useState(false);

    const { currentSong, songList, setCurrentSong, showSelectArea } = useSong();

    useEffect(() => {
        if (audioRef.current) {
            audioRef.current.pause();
            setCurrentTime(0);
        }
        if (currentSong) {
            audioRef.current.src = currentSong.audio;
            audioRef.current.load();
            audioRef.current.play();
            setIsPlaying(true);
        }
    }, [currentSong]);

    useEffect(() => {
        if (audioRef.current) {
            audioRef.current.onloadeddata = () => {
                if (isPlaying) {
                    audioRef.current.play().catch(error => {
                        console.error("Failed to play audio:", error);
                    });
                }
            };
        }
    }, [currentSong, isPlaying]);

    useEffect(() => {
        if (audioRef.current) {
            audioRef.current.volume = volume.x / 100;
        }
    }, [volume]);

    const handlePlayPause = () => {
        if (audioRef.current === null) {
            alert("Please choose song or playlist to play!");
            return;
        } else if (isPlaying) {
            audioRef.current.pause();
        } else {
            audioRef.current.play();
        }
        setIsPlaying(prev => !prev);
    };

    const handleNext = () => {
        if (isRepeating) {
            audioRef.current.currentTime = 0;
            audioRef.current.play();
        } else {
            if (!currentSong) return;
            const currentIndex = songList.findIndex(song => song.id === currentSong.id);
            const nextIndex = (currentIndex + 1) % songList.length;
            setCurrentSong(songList[nextIndex]);
        }
    };

    // const handleNext = () => {
    //     if (!currentSong) return;
    //     const currentIndex = songList.findIndex(song => song.id === currentSong.id);
    //     const nextIndex = (currentIndex + 1) % songList.length;
    //     setCurrentSong(songList[nextIndex]);
    // };

    const handlePrev = () => {
        if (!currentSong) return;
        const currentIndex = songList.findIndex(song => song.id === currentSong.id);
        const prevIndex = (currentIndex - 1 + songList.length) % songList.length;
        setCurrentSong(songList[prevIndex]);
    };

    const handleTimeSliderChange = ({ x }) => {
        audioRef.current.currentTime = x;
        setCurrentTime(x);

        if (!isPlaying) {
            setIsPlaying(true);
            audioRef.current.play();
        }
    };

    const handleSongSelect = (song) => {
        setCurrentSong(song);
    };

    const toggleRepeat = () => {
        setIsRepeating(prev => !prev);
    };

    return (
        <div className="player-container">
            <section className="icon-section">
                <img src={dvd} alt="player-icon" />
            </section>
            <section>
                <h3>{currentSong ? currentSong.songName : 'Title'}</h3>
                <h5>{currentSong ? currentSong.artist : 'Artist'}</h5>
            </section>
            <TimeSlider
                axis="x"
                xmax={duration || 100}
                x={currentTime || 0}
                onChange={handleTimeSliderChange}
            />
            {currentSong && (
                <audio
                    ref={audioRef}
                    onLoadedData={() => setDuration(audioRef.current.duration)}
                    onTimeUpdate={() => setCurrentTime(audioRef.current.currentTime)}
                    onEnded={handleNext}
                />
            )}
            <section className='volume'>
                <img src={volumeIcon} alt="volume" />
                <Slider className="slider"
                    axis="x"
                    x={volume.x}
                    xmin={0}
                    xmax={100}
                    onChange={({ x }) => setVolume({ x })}
                />
            </section>

            <section className='song-option'>
                <button className='btn-repeat' onClick={toggleRepeat}>
                    <img src={repeat} alt='Repeat song' />
                </button>
            </section>
            <section className="button-container">
                <button onClick={handlePrev}>
                    <img src={prev} alt="Previous" />
                </button>
                <button onClick={handlePlayPause}>
                    <img src={isPlaying ? pause : play} alt={isPlaying ? "Pause" : "Play"} />
                </button>
                <button onClick={handleNext}>
                    <img src={next} alt="Next" />
                </button>
            </section>
            {showSelectArea && (
                <section>
                    <h3>Playlist Songs:</h3>
                    <div className="song-list">
                        {songList.length > 0 ? (
                            songList.map(song => (
                                <div
                                    key={song.id}
                                    onClick={() => handleSongSelect(song)}
                                    className="song-item"
                                >
                                    <h5>{song.songName}</h5>
                                </div>
                            ))
                        ) : (
                            <p>No songs available in this playlist.</p>
                        )}
                    </div>
                </section>
            )}
        </div>
    );
}


================

function SongsPagination({ totalItems, itemsPerPage, currentPage, onPageChange, selectedItemsCount }) {
    const totalPages = Math.ceil(totalItems / itemsPerPage);

    const handlePageChange = (page) => {
        if (page >= 1 && page <= totalPages) {
            onPageChange(page);
        }
    };

    return (
        <div className="pagination">
            <span>Total Items: {totalItems}</span>
            <span>Page size:
                <select
                    defaultValue={itemsPerPage}
                    onChange={(e) => onPageChange(1, e.target.value)}
                >
                    <option value={14}>14</option>
                    <option value={30}>30</option>
                    <option value={50}>50</option>
                </select>
            </span>
            <span>Selected Items: {selectedItemsCount}</span>
            <button onClick={() => handlePageChange(currentPage - 1)} disabled={currentPage === 1}>Previous</button>
            <span>{currentPage} / {totalPages}</span>
            <button onClick={() => handlePageChange(currentPage + 1)} disabled={currentPage === totalPages}>Next</button>
        </div>
    );
}

export default SongsPagination;

====================
import React, { useState, useEffect } from "react";
import { useSong } from './SongContext';
import del from "../img/delete-icon.png";
import edit from "../img/edit-icon.png";
import play from "../img/play-icon.png";
import addToPlaylists from "../img/add-playlist-icon.png";
import AddToPlaylistModal from "./modal/AddSongToPlayListModal"

export default function SongTable({
  currentSongs,
  checkState,
  startIndex,
  handleCheckboxChange,
  handleToggleAll,
  deleteOneSong,
  setEditModalShow,
  setSelectedSong,
  isAllChecked,
  addToPlaylist
}) {
  const [addToPlaylistModalShow, setAddToPlaylistModalShow] = useState(false);
  const [selectedSongForPlaylist, setSelectedSongForPlaylist] = useState(null);
  const { setSongList, setCurrentSongs } = useSong();
  const { setCurrentSong, setIsPlaying, setShowSelectArea } = useSong();


  useEffect(() => {
    setCurrentSongs(currentSongs);
  }, [currentSongs, setSongList, setCurrentSongs]);

  const handleAddToPlaylist = (song) => {
    setSelectedSongForPlaylist(song);
    setAddToPlaylistModalShow(true);
  };

  // const handlePlaySong = (song) => {
  //     setCurrentSong(song);
  //     setIsPlaying(true);
  // };

  const handlePlaySong = (song) => {
    setSongList(currentSongs);
    setCurrentSong(song);
    setIsPlaying(true);
    setShowSelectArea(false);
  };


  return (
    <div id="table-container">
      <table id="table">
        <thead>
          <tr id="fixed-title">
            <th className="checkBox-column">
              <input
                id="checkBoxAll"
                type="checkbox"
                onChange={handleToggleAll}
                checked={currentSongs.length > 0 && isAllChecked}
                disabled={currentSongs.length === 0}
              />
            </th>
            <th className="name-column">Name</th>
            <th className="artist-column">Artist</th>
            <th className="action-column">Actions</th>
          </tr>
        </thead>
        <tbody>
          {currentSongs.map((song, index) => (
            <tr key={song.id}>
              <th>
                <input
                  type="checkbox"
                  checked={checkState[startIndex + index] || false}
                  onChange={() => handleCheckboxChange(index)}
                />
              </th>
              <td>{song.songName}</td>
              <td>{song.artist}</td>
              <td>
                <button onClick={() => handlePlaySong(song)}>
                  <img src={play} alt="play-song-icon" />
                  Play
                </button>
                <button onClick={() => handleAddToPlaylist(song)}>
                  <img src={addToPlaylists} alt="add-to-playlist-icon" />
                  Add to playlists
                </button>
                <button
                  onClick={() => {
                    setSelectedSong(song);
                    setEditModalShow(true);
                  }}
                >
                  <img src={edit} alt="edit-song-icon" />
                  Edit
                </button>
                <button onClick={() => deleteOneSong(song.id)}>
                  <img src={del} alt="delete-song-icon" />
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {selectedSongForPlaylist && (
        <AddToPlaylistModal
          show={addToPlaylistModalShow}
          onHide={() => setAddToPlaylistModalShow(false)}
          song={selectedSongForPlaylist}
          onAddToPlaylist={addToPlaylist}
        />
      )}
    </div>
  );
}
===================

