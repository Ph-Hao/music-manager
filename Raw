import { useState } from 'react';

export default function AddSongModal({ show, onHide, onCreatePlaylist }) {
    const [songName, setSongName] = useState('');
    const [artist, setArtist] = useState('');
    const [album, setAlbum] = useState('');
    const [year, setYear] = useState('');
    const [errors, setErrors] = useState({});
    const validate = () => {
        const newErrors = {};
        if (!songName) newErrors.songName = "Song name is required.";
        if (!artist) newErrors.artist = "Artist is required.";
        if (!album) newErrors.album = "Album is required.";
        if (!year) newErrors.year = "Year is required.";
        else if (isNaN(year) || year < 1900 || year > new Date().getFullYear()) {
            newErrors.year = "Please enter a valid year.";
        }
        return newErrors;
    };

    const handleSubmit = () => {
        const newErrors = validate();
        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
            return;
        }

        const newPlaylist = { songName, artist, album, year };
        onCreatePlaylist(newPlaylist);
        setSongName('');
        setArtist('');
        setAlbum('');
        setYear('');
        setErrors({});
    };

    if (!show) return null;

    return (
        <div className="modal-overlay">
            <div className="modal">
                <div className="modal-header">
                    <h2>Add New Song</h2>
                    <button className="close-button" onClick={onHide}>X</button>
                </div>
                <div className="modal-body">
                    <h4>song Information</h4>
                    <input
                        type="text"
                        placeholder="Song Name"
                        value={songName}
                        onChange={(e) => setSongName(e.target.value)}
                    />
                    {errors.songName && <p className="error">{errors.songName}</p>}

                    <input
                        type="text"
                        placeholder="Artist"
                        value={artist}
                        onChange={(e) => setArtist(e.target.value)}
                    />
                    {errors.artist && <p className="error">{errors.artist}</p>}

                    <input
                        type="text"
                        placeholder="Album"
                        value={album}
                        onChange={(e) => setAlbum(e.target.value)}
                    />
                    {errors.album && <p className="error">{errors.album}</p>}

                    <input
                        type="number"
                        placeholder="Year"
                        value={year}
                        onChange={(e) => setYear(e.target.value)}
                    />
                    {errors.year && <p className="error">{errors.year}</p>}
                </div>
                <div className="modal-footer">
                    <button className="submit-button" onClick={handleSubmit}>Add Song</button>
                    <button className="close-button" onClick={onHide}>Close</button>
                </div>
            </div>
        </div>
    );
}


===========================================================

import React, { useEffect, useState } from 'react';
import { getPlaylistsApi, getPlaylistApi, addPlaylistsApi } from '../../util/playlistsRestApi';
import '../../scss/AddSongToPlaylistModal.scss';

export default function AddToPlaylistModal({ show, onHide, song, onAddToPlaylist }) {
    const [playlists, setPlaylists] = useState([]);
    const [selectedPlaylist, setSelectedPlaylist] = useState('');

    const fetchPlaylists = async () => {
        const data = await getPlaylistsApi();
        setPlaylists(data);
    };

    useEffect(() => {
        fetchPlaylists();
    }, []);

    const handleAdd = async () => {
        try {
            if (song && selectedPlaylist) {
                const playlist = await getPlaylistApi(selectedPlaylist);
                if (playlist.songs.filter(songInPlaylist => songInPlaylist.id === song.id).length > 0) {
                    alert('Song already added to playlist successfully!');
                    return;
                }
                await onAddToPlaylist(song, selectedPlaylist);
                onHide();
            }
        } catch (error) {
            console.error(error);
        }
    };

    const handleCreateNewPlaylist = async () => {
        const nameToUse = `Playlist ${playlists.length + 1}`;
        const newPlaylist = {
            name: nameToUse,
            songs: [song]
        };
        await addPlaylistsApi(newPlaylist);
        onHide();
        alert('Playlist created successfully!');
    };

    return (
        <div className={`add-to-playlist-modal ${show ? 'show' : ''}`} onClick={onHide}>
            <div className="add-to-playlist-modal-content" onClick={(e) => e.stopPropagation()}>
                <h2>Add to Playlist</h2>
                {playlists.length > 0 ? (
                    <>
                        <select
                            className='add-to-playlist-select'
                            value={selectedPlaylist}
                            onChange={(e) => setSelectedPlaylist(e.target.value)}
                        >
                            <option value="" disabled>Select a playlist</option>
                            {playlists.map((playlist) => (
                                <option key={playlist.id} value={playlist.id}>
                                    {playlist.name}
                                </option>
                            ))}
                        </select>
                        <div className="add-button-container">
                            <button className="add-button" onClick={handleAdd} disabled={!selectedPlaylist}>
                                Add to Playlist
                            </button>
                        </div>
                    </>
                ) : (
                    <>
                        <p style={{ textAlign: "center" }}>No playlists available. Do you want to create new playlist with this song?</p>
                        <div className="create-playlist-button-container">
                            <button className="create-playlist-button" onClick={handleCreateNewPlaylist}>
                                Create new playlist
                            </button>
                        </div>
                    </>
                )}
                <div className="button-container">
                    <button className="close-button" onClick={onHide}>Close</button>
                </div>
            </div>
        </div>
    );
}

============================================================
import { useState, useEffect } from 'react';
import { getSongsApi } from '../../util/songsRestApi';

export default function CreatePlaylistModal({ show, onHide, onCreatePlaylist, playlistLength }) {
    const [playlistName, setPlaylistName] = useState('');
    const [selectedSongs, setSelectedSongs] = useState([]);
    const [songs, setSongs] = useState([]);

    useEffect(() => {
        const fetchSongs = async () => {
            try {
                const fetchedSongs = await getSongsApi();
                if (Array.isArray(fetchedSongs) && fetchedSongs.length > 0) {
                    setSongs(fetchedSongs);
                } else {
                    console.error("Fetched songs are not an array or are empty");
                }
            } catch (error) {
                console.error("Error fetching songs:", error);
            }
        };

        if (show) {
            fetchSongs();
        }
    }, [show]);

    const handleSubmit = async () => {
        const nameToUse = playlistName.trim() || `Playlist ${playlistLength + 1}`;
        const newPlaylist = {
            name: nameToUse,
            songs: selectedSongs.map(songId => {
                const song = songs.find(s => s.id === songId);
                return song ? { ...song } : null;
            }).filter(Boolean)
        };
        onCreatePlaylist(newPlaylist);
        resetFields();
        onHide();
    };

    const resetFields = () => {
        setPlaylistName('');
        setSelectedSongs([]);
    };

    const handleSongSelection = (event) => {
        const selectedOptions = Array.from(event.target.selectedOptions).map(option => option.value);
        setSelectedSongs(selectedOptions);
    };

    if (!show) return null;

    return (
        <div className="modal-overlay">
            <div className="modal">
                <div className="modal-header">
                    <h2>Create Playlist</h2>
                    <button className="close-button" onClick={onHide}>X</button>
                </div>
                <div className="modal-body">
                    <h4>Playlist Name</h4>
                    <input
                        type="text"
                        placeholder="Enter playlist name"
                        value={playlistName}
                        onChange={(e) => setPlaylistName(e.target.value)}
                    />
                    <h4>Select Songs</h4>
                    <select
                        multiple
                        value={selectedSongs}
                        onChange={handleSongSelection}
                        style={{ width: '100%', height: '100px' }}
                    >
                        {songs.length > 0 ? (
                            songs.map((song) => (
                                <option key={song.id} value={song.id}>
                                    {song.songName} | {song.artist}
                                </option>
                            ))
                        ) : (
                            <option disabled>No songs available</option>
                        )}
                    </select>
                </div>
                <div className="modal-footer">
                    <button className="submit-button" onClick={handleSubmit}>Add Playlist</button>
                    <button className="close-button" onClick={onHide}>Close</button>
                </div>
            </div>
        </div>
    );
}
===============================
import { useState } from 'react';

export default function EditSongModal({ show, onHide, song, onEditSong }) {
    const [songName, setSongName] = useState(song.songName);
    const [artist, setArtist] = useState(song.artist);
    const [album, setAlbum] = useState(song.album);
    const [year, setYear] = useState(song.year);
    const [errors, setErrors] = useState({});

    const validate = () => {
        const newErrors = {};
        if (!songName) newErrors.songName = "Song name is required.";
        if (!artist) newErrors.artist = "Artist is required.";
        if (!album) newErrors.album = "Album is required.";
        if (!year) newErrors.year = "Year is required.";
        else if (isNaN(year) || year < 1900 || year > new Date().getFullYear()) {
            newErrors.year = "Please enter a valid year.";
        }
        return newErrors;
    };

    const handleSubmit = () => {
        const newErrors = validate();
        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
            return;
        }

        const updatedSong = { ...song, songName, artist, album, year };
        onEditSong(updatedSong);
        onHide();
    };

    if (!show) return null;

    return (
        <div className="modal-overlay">
            <div className="modal">
                <div className="modal-header">
                    <h2>Edit Song</h2>
                    <button className="close-button" onClick={onHide}>X</button>
                </div>
                <div className="modal-body">
                    <h4>Song Information</h4>
                    <input
                        type="text"
                        placeholder="Song Name"
                        value={songName}
                        onChange={(e) => setSongName(e.target.value)}
                    />
                    {errors.songName && <p className="error">{errors.songName}</p>}

                    <input
                        type="text"
                        placeholder="Artist"
                        value={artist}
                        onChange={(e) => setArtist(e.target.value)}
                    />
                    {errors.artist && <p className="error">{errors.artist}</p>}

                    <input
                        type="text"
                        placeholder="Album"
                        value={album}
                        onChange={(e) => setAlbum(e.target.value)}
                    />
                    {errors.album && <p className="error">{errors.album}</p>}

                    <input
                        type="number"
                        placeholder="Year"
                        value={year}
                        onChange={(e) => setYear(e.target.value)}
                    />
                    {errors.year && <p className="error">{errors.year}</p>}
                </div>
                <div className="modal-footer">
                    <button className="submit-button" onClick={handleSubmit}>Save Changes</button>
                    <button className="close-button" onClick={onHide}>Close</button>
                </div>
            </div>
        </div>
    );
}


=========================
import { useState, useEffect } from 'react';
import { getSongsApi } from '../../util/songsRestApi';
import { updatePlaylistApi } from '../../util/playlistsRestApi'; // Import hàm updatePlaylistApi

export default function UpdatePlaylistModal({ show, onHide, onUpdatePlaylist, selectedPlaylist }) {
    const [playlistName, setPlaylistName] = useState('');
    const [selectedSongs, setSelectedSongs] = useState([]);
    const [songs, setSongs] = useState([]);

    useEffect(() => {
        const fetchSongs = async () => {
            try {
                const fetchedSongs = await getSongsApi();
                if (Array.isArray(fetchedSongs) && fetchedSongs.length > 0) {
                    setSongs(fetchedSongs);
                } else {
                    console.error("Fetched songs are not an array or are empty");
                }
            } catch (error) {
                console.error("Error fetching songs:", error);
            }
        };

        if (show) {
            fetchSongs();
            if (selectedPlaylist) {
                setPlaylistName(selectedPlaylist.name);
                setSelectedSongs(selectedPlaylist.songs.map(song => song.id)); // Lấy ID bài hát
            }
        }
    }, [show, selectedPlaylist]);

    const handleSubmit = async () => {
        const updatedPlaylist = {
            id: selectedPlaylist.id,
            name: playlistName.trim(),
            songs: selectedSongs.map(songId => {
                const song = songs.find(s => s.id === songId);
                return song ? { ...song } : null; // Trả về đối tượng bài hát nếu tìm thấy
            }).filter(Boolean) // Lọc các null
        };
        const updatedResponse = await updatePlaylistApi(selectedPlaylist.id, updatedPlaylist); // Cập nhật playlist
        onUpdatePlaylist(updatedResponse);
        resetFields();
        onHide();
    };

    const resetFields = () => {
        setPlaylistName('');
        setSelectedSongs([]);
    };

    const handleSongSelection = (event) => {
        const selectedOptions = Array.from(event.target.selectedOptions).map(option => option.value);
        setSelectedSongs(selectedOptions);
    };

    if (!show) return null;

    return (
        <div className="modal-overlay">
            <div className="modal">
                <div className="modal-header">
                    <h2>Update Playlist</h2>
                    <button className="close-button" onClick={onHide}>X</button>
                </div>
                <div className="modal-body">
                    <h4>Playlist Name</h4>
                    <input
                        type="text"
                        placeholder="Enter playlist name"
                        value={playlistName}
                        onChange={(e) => setPlaylistName(e.target.value)}
                    />
                    <h4>Select Songs</h4>
                    <select
                        multiple
                        value={selectedSongs}
                        onChange={handleSongSelection}
                        style={{ width: '100%', height: '100px' }}
                    >
                        {songs.length > 0 ? (
                            songs.map((song) => (
                                <option key={song.id} value={song.id}>
                                    {song.songName} | {song.artist}
                                </option>
                            ))
                        ) : (
                            <option disabled>No songs available</option>
                        )}
                    </select>
                </div>
                <div className="modal-footer">
                    <button className="submit-button" onClick={handleSubmit}>Update Playlist</button>
                    <button className="close-button" onClick={onHide}>Close</button>
                </div>
            </div>
        </div>
    );
}
========================================================================
import { Link } from "react-router-dom";
import SongPlayer from "./SongPlayer"

export default function Aside() {

    const handlePlaySong = () => {

    }
    return (
        <aside>
            <>
                <Link
                    to='/songs'
                    style={{
                        textDecoration: 'none',
                        color: 'inherit'
                    }}
                >
                    <button>
                        Songs
                    </button>
                </Link>

                <Link
                    to='/playlists'
                    style={{
                        textDecoration: 'none',
                        color: 'inherit'
                    }}
                >
                    <button>
                        Playlist
                    </button>
                </Link>
                <SongPlayer></SongPlayer>

            </>
        </aside>
    );
}
==========================================================
import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';

export default function Direction({ path }) {
    return (
        <section id='direction'>
            <Link to="/">Home</Link>
            {path && <span> {path}</span>}
        </section>
    );
}
==========================================

export default function Footer() {
  return (
    <footer>
      <h6>Copyright 2014 TMA Solutions</h6>
    </footer>
  );
}


========================
import { Link } from "react-router-dom";
import logo from "../img/music-icon.png";

export default function Headers() {
  return (
    <header>
      <img src={logo} alt="music-icon" />

      <Link
        to='/'
        style={{
          textDecoration: 'none',
          color: 'inherit'
        }}
      >
        <h1>Spotifier</h1>
      </Link>
    </header>
  );
}
======================================================

import React, { useEffect } from "react";

export default function Home({ setPath }) {

    useEffect(() => setPath(""), [setPath])

    return (
        <section style={{
            width: `100%`,
            height: '750px'
        }}>
        </section>
    )
}


==================================
import { Route, Routes } from 'react-router-dom';
import Aside from "./Aside";
import Direction from "./Direction";
import ManageSongs from './ManageSongs';
import ManagePlayLists from './ManagePlaylists'
import { useState } from 'react';
import Home from './Home';
import { SongProvider } from './SongContext';

export default function Main() {
  const [path, setPath] = useState('');
  const [songs, setSongsToPlay] = useState([]);



  return (
    <SongProvider>
      <main>
        <Aside />
        <section id="main-section">
          <Direction path={path} />
          <Routes>
            <Route path='/' element={<Home setPath={setPath} songs={songs.length > 0 ? songs : []} />} />
            <Route path='/songs' element={<ManageSongs setPath={setPath} setSongsToPlay={setSongsToPlay} />} />
            <Route path='/playlists' element={<ManagePlayLists setPath={setPath} />} />
          </Routes>
        </section>
      </main>
    </SongProvider>
  );
}

===========================
import { useState, useEffect } from 'react';
import {
    getPlaylistsApi,
    addPlaylistsApi,
    updatePlaylistApi,
    deletePlaylistApi
} from '../util/playlistsRestApi';
import PlaylistTable from "./PlaylistTable";
import NavPlaylist from './NavPlaylist';
import PlaylistsPagination from './PlaylistsPagination';
import CreatePlaylistModal from './modal/CreatePlaylistModal';
import UpdatePlaylistModal from './modal/UpdatePlaylistModal';

export default function ManagePlaylists({ setPath }) {
    const [playlists, setPlaylists] = useState([]);
    const [checkState, setCheckState] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [isAllChecked, setIsAllChecked] = useState(false);
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage, setItemsPerPage] = useState(14);
    const [modalShow, setModalShow] = useState(false);
    const [editModalShow, setEditModalShow] = useState(false);
    const [selectedPlaylist, setSelectedPlaylist] = useState(null);

    const fetchPlaylists = async () => {
        const data = await getPlaylistsApi();
        setPlaylists(data);
        setCheckState(Array(data.length).fill(false));
    };

    useEffect(() => {
        fetchPlaylists();
    }, []);

    useEffect(() => {
        setPath(">> Playlist");
    }, [setPath]);

    const filteredPlaylists = playlists.filter(playlist => {
        const lowercasedSearchTerm = searchTerm.toLowerCase();
        return (
            playlist.name.toLowerCase().includes(lowercasedSearchTerm) ||
            playlist.songs.length === parseInt(searchTerm)
        );
    });

    const totalPlaylists = filteredPlaylists.length;
    const startIndex = (currentPage - 1) * itemsPerPage;
    const currentPlaylists = filteredPlaylists.slice(startIndex, startIndex + itemsPerPage);

    useEffect(() => {
        if (currentPlaylists.length === 0) {
            setIsAllChecked(false);
        } else {
            const allChecked = currentPlaylists.every((_, index) => checkState[startIndex + index]);
            setIsAllChecked(allChecked);
        }
    }, [checkState, currentPlaylists, startIndex]);

    const handleCheckboxChange = (index) => {
        const updatedCheckState = [...checkState];
        updatedCheckState[startIndex + index] = !updatedCheckState[startIndex + index];
        setCheckState(updatedCheckState);
    };


    const handleToggleAll = (e) => {
        const isChecked = e.target.checked;
        const updatedCheckState = checkState.map((checked, index) => {
            const isInCurrentPage = index >= startIndex && index < startIndex + itemsPerPage;
            return isInCurrentPage ? isChecked : checked;
        });
        setCheckState(updatedCheckState);
    };


    const handleSearchChange = (e) => {
        setSearchTerm(e.target.value.trim());
        setCurrentPage(1);
        setIsAllChecked(false);
    };

    const handlePageChange = (page, newItemsPerPage) => {
        setItemsPerPage(newItemsPerPage || itemsPerPage);
        setCurrentPage(page);
    };

    const deletePlaylists = async () => {
        try {
            const idsToDelete = filteredPlaylists
                .filter((_, index) => checkState[startIndex + index])
                .map(playlist => playlist.id);

            if (idsToDelete.length === 0) {
                window.alert("No playlists selected for deletion.");
                return;
            }

            const confirmDelete = window.confirm('Are you sure you want to delete the selected playlists?');
            if (confirmDelete) {
                for (const id of idsToDelete) {
                    await deletePlaylistApi(id);
                }
                const updatedPlaylists = playlists.filter(playlist => !idsToDelete.includes(playlist.id));
                setPlaylists(updatedPlaylists);
                setCheckState(Array(updatedPlaylists.length).fill(false));
                setIsAllChecked(false);
            }
        } catch (error) {
            console.error("Failed to delete playlists", error);
        }
    };

    const deleteOnePlaylist = async (id) => {
        try {
            const confirmDelete = window.confirm('Are you sure you want to delete this playlist?');
            if (confirmDelete) {
                await deletePlaylistApi(id);
                const updatedPlaylists = playlists.filter(playlist => playlist.id !== id);
                setPlaylists(updatedPlaylists);
                setCheckState(checkState.filter((_, index) => playlists[index].id !== id));
                setIsAllChecked(false);
            }
        } catch (error) {
            console.error("Failed to delete playlist", error);
        }
    };

    const handleCreatePlaylist = async (newPlaylist) => {
        const addedPlaylist = await addPlaylistsApi(newPlaylist);
        if (addedPlaylist) {
            fetchPlaylists();
        }
    };

    const selectedItemsCount = checkState.filter(Boolean).length;

    const handleUpdatePlaylist = async (updatedPlaylist) => {
        await updatePlaylistApi(updatedPlaylist.id, updatedPlaylist);
        setPlaylists(prevPlaylists => prevPlaylists.map(playlist => (playlist.id === updatedPlaylist.id ? updatedPlaylist : playlist)));
        setEditModalShow(false);
    };

    const editPlaylist = (playlist) => {
        setSelectedPlaylist(playlist);
        setEditModalShow(true);
    };


    return (
        <>
            <NavPlaylist
                onSearchChange={handleSearchChange}
                deletePlaylists={deletePlaylists}
                showModal={() => setModalShow(true)}
            />
            <PlaylistTable
                playlists={currentPlaylists}
                checkState={checkState}
                handleCheckboxChange={handleCheckboxChange}
                handleToggleAll={handleToggleAll}
                deleteOnePlaylist={deleteOnePlaylist}
                setEditModalShow={setEditModalShow}
                setSelectedPlaylist={editPlaylist}
                isAllChecked={isAllChecked}
            />
            <PlaylistsPagination
                totalItems={totalPlaylists}
                itemsPerPage={itemsPerPage}
                currentPage={currentPage}
                onPageChange={handlePageChange}
                selectedItemsCount={selectedItemsCount}
            />
            <CreatePlaylistModal
                show={modalShow}
                onHide={() => setModalShow(false)}
                onCreatePlaylist={handleCreatePlaylist}
                playlistLength={playlists.length}
            />
            <UpdatePlaylistModal
                show={editModalShow}
                onHide={() => setEditModalShow(false)}
                onUpdatePlaylist={handleUpdatePlaylist}
                selectedPlaylist={selectedPlaylist}
            />
        </>
    );
}

====================
import { useState, useEffect } from 'react';
import { getSongsApi, deleteSongApi, addSongApi, updateSongApi } from "../util/songsRestApi";
import SongsPagination from './SongsPagination';
import AddSongModal from './modal/AddSongModal';
import EditSongModal from './modal/EditSongModal';
import NavSong from "./NavSong";
import SongTable from "./SongTable";
import { addSongToPlaylistApi } from '../util/songsRestApi';

export default function ManageSongs({ setPath }) {
    const [songs, setSongs] = useState([]);
    const [checkState, setCheckState] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [isAllChecked, setIsAllChecked] = useState(false);
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage, setItemsPerPage] = useState(14);
    const [modalShow, setModalShow] = useState(false);
    const [editModalShow, setEditModalShow] = useState(false);
    const [selectedSong, setSelectedSong] = useState(null);

    const fetchSongs = async () => {
        const data = await getSongsApi();
        setSongs(data);
        setCheckState(Array(data.length).fill(false));
    };

    useEffect(() => {
        fetchSongs();
    }, []);


    useEffect(() => {
        setPath(">> Songs");
    }, [setPath]);

    const filteredSongs = songs.filter(song =>
        song.songName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        song.artist.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const totalSongs = filteredSongs.length;
    const startIndex = (currentPage - 1) * itemsPerPage;
    const currentSongs = filteredSongs.slice(startIndex, startIndex + itemsPerPage);

    useEffect(() => {
        const allChecked = currentSongs.every((_, index) => checkState[startIndex + index]);
        setIsAllChecked(allChecked);
    }, [checkState, currentSongs, startIndex]);


    const handleSearchChange = (e) => {
        const trimmedValue = e.target.value.trim();
        setSearchTerm(trimmedValue);
        setCurrentPage(1);
        setIsAllChecked(false);
    };

    const deleteSongs = async () => {
        try {
            const idSongs = filteredSongs
                .filter((_, index) => checkState[startIndex + index])
                .map(song => song.id);

            if (idSongs.length === 0) {
                window.alert("No songs selected for deletion.");
                return;
            }

            const confirmDelete = window.confirm('Are you sure! you want to delete the selected songs ?');
            if (confirmDelete) {
                for (const id of idSongs) {
                    await deleteSongApi(id);
                }
                const updatedSongs = songs.filter(song => !idSongs.includes(song.id));
                setSongs(updatedSongs);
                setCheckState(Array(updatedSongs.length).fill(false));
                setIsAllChecked(false);
            }
        } catch (error) {
            console.error("Failed to delete songs", error);
        }
    };

    const handleCheckboxChange = (index) => {
        const updatedCheckState = [...checkState];
        updatedCheckState[startIndex + index] = !updatedCheckState[startIndex + index];
        setCheckState(updatedCheckState);
    };

    const handleToggleAll = (e) => {
        const isChecked = e.target.checked;
        const updatedCheckState = checkState.map((checked, index) => {
            const isInCurrentPage = index >= startIndex && index < startIndex + itemsPerPage;
            return isInCurrentPage ? isChecked : checked;
        });
        setCheckState(updatedCheckState);
    };

    const deleteOneSong = async (id) => {
        try {
            const confirmDelete = window.confirm('Are you sure! you want to delete this song ?');
            if (confirmDelete) {
                await deleteSongApi(id);
                const updatedSongs = songs.filter(song => song.id !== id);
                setSongs(updatedSongs);
                setCheckState(checkState.filter((_, index) => songs[index].id !== id));
                setIsAllChecked(false);
            }
        } catch (error) {
            console.error("Failed to delete song", error);
        }
    };


    const handleAddSong = async (newSong) => {
        try {
            const addedSong = await addSongApi(newSong);
            setSongs(prevSongs => [...prevSongs, addedSong]);
            setModalShow(false);
        } catch (error) {
            console.error("Failed to add song", error);
        }
    };

    const handleEditSong = async (updatedSong) => {
        try {
            await updateSongApi(updatedSong.id, updatedSong);
            setSongs(prevSongs => prevSongs.map(song => (song.id === updatedSong.id ? updatedSong : song)));
            setEditModalShow(false);
        } catch (error) {
            console.error("Failed to edit song", error);
        }
    };

    const selectedItemsCount = checkState.filter(Boolean).length;

    const addToPlaylist = async (song, playlistId) => {
        try {
            await addSongToPlaylistApi(song, playlistId);
            alert('Song added to playlist successfully!');
        } catch (error) {
            console.error('Failed to add song to playlist:', error);
            alert('Failed to add song to playlist.');
        }
    };

    return (
        <>
            <NavSong onSearchChange={handleSearchChange} deleteSongs={deleteSongs} showModal={() => setModalShow(true)} />
            <SongTable
                currentSongs={currentSongs}
                checkState={checkState}
                startIndex={startIndex}
                handleCheckboxChange={handleCheckboxChange}
                handleToggleAll={handleToggleAll}
                deleteOneSong={deleteOneSong}
                setEditModalShow={setEditModalShow}
                setSelectedSong={setSelectedSong}
                isAllChecked={isAllChecked}
                addToPlaylist={addToPlaylist} // Thêm hàm này vào
            />
            <SongsPagination
                totalItems={totalSongs}
                itemsPerPage={itemsPerPage}
                currentPage={currentPage}
                onPageChange={(page, newItemsPerPage) => {
                    setItemsPerPage(newItemsPerPage || itemsPerPage);
                    setCurrentPage(page);
                }}
                selectedItemsCount={selectedItemsCount}
            />
            <AddSongModal show={modalShow} onHide={() => setModalShow(false)} onAddSong={handleAddSong} />
            {selectedSong && (
                <EditSongModal
                    show={editModalShow}
                    onHide={() => setEditModalShow(false)}
                    song={selectedSong}
                    onEditSong={handleEditSong}
                />
            )}
        </>
    );
}


===========================

import { useState } from 'react';
import search from "../img/search-icon.png";
import add from "../img/add-icon.png";
import del from "../img/delete-icon.png";

export default function NavPlaylist({ onSearchChange, deletePlaylists, showModal }) {
    const [showSearch, setShowSearch] = useState(false);

    const toggleSearch = () => {
        setShowSearch(!showSearch);
        if (showSearch) {
            onSearchChange({ target: { value: '' } });
        }
    };

    return (
        <section id="functionally">
            <nav>
                <ul id="left">
                    <h2>Manage playlists</h2>
                </ul>
                <ul id="right">
                    {!showSearch ? (
                        <>
                            <button onClick={showModal}>
                                <img src={add} alt="add-playlist-icon" />
                                Add
                            </button>
                            <button onClick={deletePlaylists}>
                                <img src={del} alt="delete-playlist-icon" />
                                Delete
                            </button>
                        </>
                    ) : (
                        <button onClick={deletePlaylists}>
                            <img src={del} alt="delete-playlist-icon" />
                            Delete
                        </button>
                    )}
                    <button onClick={toggleSearch}>
                        <img src={search} alt="search-playlist-icon" />
                        {showSearch ? "Close" : "Search"}
                    </button>
                    {showSearch && (
                        <div className="search-container">
                            <input
                                type="text"
                                className="search-input"
                                placeholder="Search for a playlist..."
                                onChange={onSearchChange}
                            />
                        </div>
                    )}
                </ul>
            </nav>
        </section>
    );
}

=======================
import { useState } from 'react';
import search from "../img/search-icon.png";
import add from "../img/add-icon.png";
import del from "../img/delete-icon.png";

export default function NavSong({ onSearchChange, deleteSongs, showModal }) {
    const [showSearch, setShowSearch] = useState(false);

    const toggleSearch = () => {
        setShowSearch(!showSearch);
        if (showSearch) {
            onSearchChange({ target: { value: '' } });
        }
    };

    return (
        <section id="functionally">
            <nav>
                <ul id="left">
                    <h2>Manage songs</h2>
                </ul>
                <ul id="right">
                    {!showSearch ? (
                        <>
                            <button onClick={showModal}>
                                <img src={add} alt="add-song-icon" />
                                Add
                            </button>
                            <button onClick={deleteSongs}>
                                <img src={del} alt="delete-song-icon" />
                                Delete
                            </button>
                        </>
                    ) : (
                        <button onClick={deleteSongs}>
                            <img src={del} alt="delete-song-icon" />
                            Delete
                        </button>
                    )}
                    <button onClick={toggleSearch}>
                        <img src={search} alt="search-song-icon" />
                        {showSearch ? "Close" : "Search"}
                    </button>
                    {showSearch && (
                        <div className="search-container">
                            <input
                                type="text"
                                className="search-input"
                                placeholder="Search for a song..."
                                onChange={onSearchChange}
                            />
                        </div>
                    )}
                </ul>
            </nav>
        </section>
    );
}


========================
function PlaylistsPagination({ totalItems, itemsPerPage, currentPage, onPageChange, selectedItemsCount }) {
    const totalPages = Math.ceil(totalItems / itemsPerPage);

    const handlePageChange = (page) => {
        if (page >= 1 && page <= totalPages) {
            onPageChange(page);
        }
    };

    return (
        <div className="pagination">
            <span>Total Items: {totalItems}</span>
            <span>Page size:
                <select
                    defaultValue={itemsPerPage}
                    onChange={(e) => onPageChange(1, e.target.value)}
                >
                    <option value={14}>14</option>
                    <option value={30}>30</option>
                    <option value={50}>50</option>
                </select>
            </span>
            <span>Selected Items: {selectedItemsCount}</span>
            <button onClick={() => handlePageChange(currentPage - 1)} disabled={currentPage === 1}>Previous</button>
            <span>{currentPage} / {totalPages}</span>
            <button onClick={() => handlePageChange(currentPage + 1)} disabled={currentPage === totalPages}>Next</button>
        </div>
    );
}

export default PlaylistsPagination;

=====================
import React from "react";
import del from "../img/delete-icon.png";
import edit from "../img/edit-icon.png";
import play from "../img/play-icon.png";

export default function PlaylistTable({
    playlists,
    checkState,
    handleCheckboxChange,
    handleToggleAll,
    deleteOnePlaylist,
    setEditModalShow,
    setSelectedPlaylist,
    isAllChecked
}) {
    return (
        <div id="table-container">
            <table id="table">
                <thead>
                    <tr id="fixed-title">
                        <th className="checkBox-column">
                            <input
                                id="checkBoxAll"
                                type="checkbox"
                                checked={isAllChecked}
                                onChange={handleToggleAll}
                            />
                        </th>
                        <th className="name-column">Name</th>
                        <th className="action-column">Songs</th>
                        <th className="action-column">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {playlists.length === 0 ? (
                        <tr>
                            <td colSpan="4">No playlists found.</td>
                        </tr>
                    ) : (
                        playlists.map((playlist, index) => (
                            <tr key={playlist.id}>
                                <th>
                                    <input
                                        type="checkbox"
                                        checked={checkState[index] || false}
                                        onChange={() => handleCheckboxChange(index)}
                                    />
                                </th>
                                <td className="name-column">{playlist.name}</td>
                                <td className="songs-column">{playlist.songs.length}</td>
                                <td className="action-column">
                                    <button>
                                        <img src={play} alt="play-song-icon" />
                                        Play
                                    </button>
                                    <button
                                        onClick={() => {
                                            setSelectedPlaylist(playlist);
                                            setEditModalShow(true);
                                        }}
                                    >
                                        <img src={edit} alt="edit-playlist-icon" />
                                        Edit
                                    </button>
                                    <button onClick={() => deleteOnePlaylist(playlist.id)}>
                                        <img src={del} alt="delete-playlist-icon" />
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        ))
                    )}
                </tbody>
            </table>
        </div>
    );
}

===========================
import React, { createContext, useContext, useState } from 'react';

const SongContext = createContext();

export const useSong = () => useContext(SongContext);

export const SongProvider = ({ children }) => {
    const [currentSong, setCurrentSong] = useState(null);
    const [songList, setSongList] = useState([]);
    const [currentSongs, setCurrentSongs] = useState([]);

    return (
        <SongContext.Provider value={{ currentSong, setCurrentSong, songList, setSongList, currentSongs, setCurrentSongs }}>
            {children}
        </SongContext.Provider>
    );
};


==================================
import React, { useState } from 'react';
import { useSong } from './SongContext';
import dvd from '../img/dvd-icon.png';
import next from '../img/next-icon.png';
import prev from '../img/prev-icon.png';
import pause from '../img/pause-icon.png';
import play from '../img/play-song-icon.png';
import '../scss/songPlayer.scss';

export default function SongPlayer() {
    const [isPlaying, setIsPlaying] = useState(false);
    const { currentSong, songList, setCurrentSong } = useSong();

    const handlePlayPause = () => {
        setIsPlaying(prev => !prev);
    };

    const handleNext = () => {
        if (!currentSong) return; // Nếu không có bài hát hiện tại, không làm gì
        const currentIndex = songList.findIndex(song => song.id === currentSong.id); // Lấy chỉ số của bài hát hiện tại
        const nextIndex = (currentIndex + 1) % songList.length; // Chuyển đến bài hát tiếp theo, nếu tới cuối thì quay lại đầu
        setCurrentSong(songList[nextIndex]); // Cập nhật bài hát hiện tại
    };

    const handlePrev = () => {
        if (!currentSong) return; // Nếu không có bài hát hiện tại, không làm gì
        const currentIndex = songList.findIndex(song => song.id === currentSong.id); // Lấy chỉ số của bài hát hiện tại
        const prevIndex = (currentIndex - 1 + songList.length) % songList.length; // Chuyển đến bài hát trước đó, nếu tới đầu thì quay lại cuối
        setCurrentSong(songList[prevIndex]); // Cập nhật bài hát hiện tại
    };

    console.log(songList);

    return (
        <div className="player-container">
            <section className="icon-section">
                <img src={dvd} alt="player-icon" />
            </section>
            <section>
                <h3>{currentSong ? currentSong.songName : 'Title'}</h3>
                <h5>{currentSong ? currentSong.artist : 'Artist'}</h5>
            </section>
            <section className="button-container">
                <button onClick={handlePrev}>
                    <img src={prev} alt="Previous" />
                </button>
                <button onClick={handlePlayPause}>
                    <img src={isPlaying ? pause : play} alt={isPlaying ? "Pause" : "Play"} />
                </button>
                <button onClick={handleNext}>
                    <img src={next} alt="Next" />
                </button>
            </section>
        </div>
    );
}

========================
function SongsPagination({ totalItems, itemsPerPage, currentPage, onPageChange, selectedItemsCount }) {
    const totalPages = Math.ceil(totalItems / itemsPerPage);

    const handlePageChange = (page) => {
        if (page >= 1 && page <= totalPages) {
            onPageChange(page);
        }
    };

    return (
        <div className="pagination">
            <span>Total Items: {totalItems}</span>
            <span>Page size:
                <select
                    defaultValue={itemsPerPage}
                    onChange={(e) => onPageChange(1, e.target.value)}
                >
                    <option value={14}>14</option>
                    <option value={30}>30</option>
                    <option value={50}>50</option>
                </select>
            </span>
            <span>Selected Items: {selectedItemsCount}</span>
            <button onClick={() => handlePageChange(currentPage - 1)} disabled={currentPage === 1}>Previous</button>
            <span>{currentPage} / {totalPages}</span>
            <button onClick={() => handlePageChange(currentPage + 1)} disabled={currentPage === totalPages}>Next</button>
        </div>
    );
}

export default SongsPagination;
==================================
import React, { useState, useEffect } from "react";
import { useSong } from './SongContext'; // import useSong từ context
import del from "../img/delete-icon.png";
import edit from "../img/edit-icon.png";
import play from "../img/play-icon.png";
import addToPlaylists from "../img/add-playlist-icon.png";
import AddToPlaylistModal from "./modal/AddSongToPlayListModal";

export default function TableSong({
    currentSongs,
    checkState,
    startIndex,
    handleCheckboxChange,
    handleToggleAll,
    deleteOneSong,
    setEditModalShow,
    setSelectedSong,
    isAllChecked,
    addToPlaylist
}) {
    const [addToPlaylistModalShow, setAddToPlaylistModalShow] = useState(false);
    const [selectedSongForPlaylist, setSelectedSongForPlaylist] = useState(null);
    const { setCurrentSong } = useSong();
    const { setSongList, setCurrentSongs } = useSong();

    useEffect(() => {
        setSongList(currentSongs);
        setCurrentSongs(currentSongs);
    }, [currentSongs, setSongList, setCurrentSongs]);

    const handleAddToPlaylist = (song) => {
        setSelectedSongForPlaylist(song);
        setAddToPlaylistModalShow(true);
    };

    const handlePlaySong = (song) => {
        setCurrentSong(song);
    };

    return (
        <div id="table-container">
            <table id="table">
                <thead>
                    <tr id="fixed-title">
                        <th className="checkBox-column">
                            <input
                                id="checkBoxAll"
                                type="checkbox"
                                onChange={handleToggleAll}
                                checked={currentSongs.length > 0 && isAllChecked}
                                disabled={currentSongs.length === 0}
                            />
                        </th>
                        <th className="name-column">Name</th>
                        <th className="artist-column">Artist</th>
                        <th className="action-column">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {currentSongs.map((song, index) => (
                        <tr key={song.id}>
                            <th>
                                <input
                                    type="checkbox"
                                    checked={checkState[startIndex + index] || false}
                                    onChange={() => handleCheckboxChange(index)}
                                />
                            </th>
                            <td>{song.songName}</td>
                            <td>{song.artist}</td>
                            <td>
                                <button onClick={() => handlePlaySong(song)}>
                                    <img src={play} alt="play-song-icon" />
                                    Play
                                </button>
                                <button onClick={() => handleAddToPlaylist(song)}>
                                    <img src={addToPlaylists} alt="add-to-playlist-icon" />
                                    Add to playlists
                                </button>
                                <button
                                    onClick={() => {
                                        setSelectedSong(song);
                                        setEditModalShow(true);
                                    }}
                                >
                                    <img src={edit} alt="edit-song-icon" />
                                    Edit
                                </button>
                                <button onClick={() => deleteOneSong(song.id)}>
                                    <img src={del} alt="delete-song-icon" />
                                    Delete
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
            {selectedSongForPlaylist && (
                <AddToPlaylistModal
                    show={addToPlaylistModalShow}
                    onHide={() => setAddToPlaylistModalShow(false)}
                    song={selectedSongForPlaylist}
                    onAddToPlaylist={addToPlaylist}
                />
            )}
        </div>
    );
}
===========================

footer {
  text-align: center;
  margin: 15px;
}


===================================
@use "sass:math";
@import "size";

header {
  @include size();
  background-color: lightgray;
  text-align: left;
  padding: 10px;
  display: flex;

  img {
    @include size(50px, 50px);
    margin-left: 20px;
  }

  h1 {
    color: rgb(241, 124, 124);
    padding: 5px;
  }
}

========================================
@use "sass:math";

$aqua: aqua;
$fullWidth: 100%;
@import "size";

.button-basic {
  border: none;
  padding: 10px;
  background-color: transparent;
  cursor: pointer;
}

main {
  display: flex;
  @include size($fullWidth);
  margin: 0;
  padding: 0;

  aside {
    @include size($width: 15%);
    background-color: #f8f9fa;
    float: left;

    button {
      @extend .button-basic;
      font-size: larger;
      width: $fullWidth;

      &:hover {
        background-color: $aqua;
      }
    }
  }

  #main-section {
    @include size($fullWidth - 15%);
  }

  #direction {
    @include size($fullWidth, 30px);
    background-color: bisque;
    // padding: 5px;
  }

  nav {
    @include size($height: 47px);
    background-color: lightblue;
    align-items: center;
    display: flex;

    #right {
      display: flex;
      align-items: center;
    }

    .search-input {
      width: 300px;
      padding: 12px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    ul {
      display: flex;
      list-style: none;
    }

    h2 {
      float: left;
      // margin-top: 15px;
    }

    button {
      @extend .button-basic;
      font-size: large;
      color: white;
      @include size($height: 100%);
      color: #686868;

      img {
        @include size(25px, 25px);
        margin-right: 8px;
        vertical-align: middle;
      }

      &:hover {
        background-color: rgb(255, 255, 255);
      }
    }
  }

  #right {
    margin-left: auto;
    padding: 15px;
    // margin-top: 15px;
    display: flex;

    button {
      margin-left: 10px;
    }
  }

  table {
    width: 100%;
    border: #686868 1px solid;

    #fixed-title {
      position: sticky;
      top: 0;
      background-color: whitesmoke;
    }

    th {
      padding: 10px 0;
    }

    td {
      text-align: left;
    }

    tr {
      &:nth-child(even) {
        background-color: #e7e7e7;
      }
    }

    .action-column {
      width: 30%;
    }

    .checkBox-column {
      width: 2.5%;
    }

    // .name-column {
    //   width: 40%;
    // }

    // .artist-column {
    //   width: 40%;
    // }

    input[type="checkbox"] {
      accent-color: blue;
      cursor: pointer;
      margin: 0;
      padding-left: 10px;
    }

    button {
      background-color: transparent;
      border: none;
      height: 38px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0 20px;
      cursor: pointer;

      img {
        width: 20px;
        height: 20px;
        margin: 3px;
      }

      &:hover {
        background-color: rgb(211, 211, 211);
      }
    }
  }

  #table-container {
    height: 650px;
    overflow-x: auto;
    overflow-y: auto;
    border: 1px solid #838383;
  }
}

========================
$modal-bg-color: white;
$modal-shadow-color: rgba(0, 0, 0, 0.3);
$primary-color: #007bff;
$error-color: red;
$close-button-bg-color: #ccc;

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;

  .modal {
    background: $modal-bg-color;
    border-radius: 8px;
    padding: 20px;
    width: 400px;
    box-shadow: 0 2px 10px $modal-shadow-color;

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;

      .close-button {
        background-color: transparent;
        border: none;
        &:hover {
          background-color: #ccc;
        }
      }
    }

    .modal-body {
      margin-top: 20px;

      input {
        width: 95%;
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      .error {
        color: $error-color;
        font-size: 0.9em;
      }
    }

    .modal-footer {
      margin-top: 20px;
      display: flex;
      justify-content: flex-end;

      .submit-button,
      .close-button {
        padding: 10px 15px;
        margin-left: 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .submit-button {
        background-color: $primary-color;
        color: white;
      }

      .close-button {
        background-color: $close-button-bg-color;
      }
    }
  }
}

==================
$pagination-border-color: #ddd;

.pagination {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding: 10px;
  border: 1px solid $pagination-border-color;

  span {
    margin: 0 10px;
  }

  button {
    padding: 5px 10px;
    margin: 0 5px;
    cursor: pointer;
    width: 70px;
  }

  .select {
    margin: 0 10px;
  }
}

============================
@mixin size($width: auto, $height: auto) {
  width: $width;
  height: $height;
}

========================
.add-to-playlist-modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  z-index: 1000;

  &.show {
    display: flex;
    justify-content: center;
    align-items: center;
  }
}

.add-to-playlist-modal-content {
  background: white;
  padding: 20px;
  border-radius: 8px;
  width: 300px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.add-to-playlist-select {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
}

.add-button,
.create-playlist-button {
  background: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  padding: 10px;
  cursor: pointer;
  margin-bottom: 10px;
  &:hover {
    background: #0056b3;
  }
}

.button-container {
  display: flex;
  justify-content: center;
}

.add-button-container,
.create-playlist-button-container {
  display: flex;
  justify-content: center;
}

.close-button {
  background: #dc3545;
  color: white;
  border: none;
  border-radius: 5px;
  padding: 10px;
  cursor: pointer;

  &:hover {
    background: #c82333;
  }
}
==================================
@import "header";
@import "main";
@import "footer";
@import "pagination";
@import "modifySongModal";

* {
  margin: 0;
}

==============
$modal-bg-color: white;
$modal-shadow-color: rgba(0, 0, 0, 0.3);
$primary-color: #007bff;
$error-color: red;
$close-button-bg-color: #ccc;

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;

  .modal {
    background: $modal-bg-color;
    border-radius: 8px;
    padding: 20px;
    width: 400px;
    box-shadow: 0 2px 10px $modal-shadow-color;

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;

      .close-button {
        background-color: transparent;
        border: none;
        cursor: pointer;
        &:hover {
          background-color: $close-button-bg-color;
        }
      }
    }

    .modal-body {
      margin-top: 20px;

      input {
        width: 95%;
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      h4 {
        margin: 10px 0;
      }

      label {
        display: block;
        margin: 5px 0;
      }

      select {
        width: 100%;
        height: 100px; // Adjust height to show more options
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-bottom: 15px; // Space below the select
      }
    }

    .modal-footer {
      margin-top: 20px;
      display: flex;
      justify-content: flex-end;

      .submit-button,
      .close-button {
        padding: 10px 15px;
        margin-left: 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .submit-button {
        background-color: $primary-color;
        color: white;
      }

      .close-button {
        background-color: $close-button-bg-color;
      }
    }
  }
}
=============
.player-container {
  justify-content: center;
  align-items: center;
  text-align: center;
}

.player-container img {
  width: 90%;
  padding-top: 20px;
}

.button-container {
  display: flex;
  justify-content: center;
  align-items: center;

  button {
    background: none;
    border: none;

    img {
      width: 70%;
      padding: 0;
    }
    &:hover {
      background-color: transparent;
    }
  }
}

====================
const PLAYLISTS_URL = "http://localhost:5000/playlists";

export const getPlaylistsApi = async () => {
  try {
    const response = await fetch(PLAYLISTS_URL);
    if (!response.ok) throw new Error("Network connection error");
    return await response.json();
  } catch (error) {
    console.error(error);
    return [];
  }
};

export const getPlaylistApi = async (id) => {
  try {
    const response = await fetch(`${PLAYLISTS_URL}/${id}`);
    if (!response.ok) throw new Error("Network connection error");
    return await response.json();
  } catch (error) {
    console.error(error);
    return null;
  }
};

export const deletePlaylistApi = async (id) => {
  try {
    const response = await fetch(`${PLAYLISTS_URL}/${id}`, {
      method: "DELETE",
    });
    if (!response.ok) throw new Error("Failed to delete song");
    return id;
  } catch (error) {
    console.error(error);
    return null;
  }
};

export const addPlaylistsApi = async (newPlaylist) => {
  try {
    const response = await fetch(PLAYLISTS_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newPlaylist),
    });
    if (!response.ok) throw new Error("Failed to add playlist");
    return await response.json();
  } catch (error) {
    console.error(error);
    return null;
  }
};

export const updatePlaylistApi = async (id, updatedPlaylist) => {
  try {
    const response = await fetch(`${PLAYLISTS_URL}/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(updatedPlaylist),
    });
    if (!response.ok) throw new Error("Failed to update playlist");
    return await response.json();
  } catch (error) {
    console.error(error);
    return null;
  }
};
==============================
const SONGS_URL = "http://localhost:5000/songs";
const PLAYLISTS_URL = "http://localhost:5000/playlists";

export const getSongsApi = async () => {
  try {
    const response = await fetch(SONGS_URL);
    if (!response.ok) throw new Error("Network connection error");

    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error fetching songs:", error);
    return [];
  }
};

export const deleteSongApi = async (id) => {
  try {
    const response = await fetch(`${SONGS_URL}/${id}`, {
      method: "DELETE",
    });
    if (!response.ok) throw new Error("Failed to delete song");
    return id;
  } catch (error) {
    console.error(error);
    return null;
  }
};

export const updateSongApi = async (id, updatedSong) => {
  try {
    const response = await fetch(`${SONGS_URL}/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(updatedSong),
    });
    if (!response.ok) throw new Error("Failed to update song");
    return await response.json();
  } catch (error) {
    console.error(error);
    return null;
  }
};

export const addSongApi = async (newSong) => {
  try {
    const response = await fetch(SONGS_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newSong),
    });
    if (!response.ok) throw new Error("Failed to add song");
    return await response.json();
  } catch (error) {
    console.error(error);
    return null;
  }
};

export const addSongToPlaylistApi = async (song, playlistId) => {
  try {
    const response = await fetch(`${PLAYLISTS_URL}/${playlistId}`);
    if (!response.ok) throw new Error("Failed to fetch playlist");

    const playlist = await response.json();
    playlist.songs.push(song);
    const updateResponse = await fetch(`${PLAYLISTS_URL}/${playlistId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(playlist),
    });

    if (!updateResponse.ok) throw new Error("Failed to update playlist");

    return await updateResponse.json();
  } catch (error) {
    console.error(error);
    return null;
  }
};
=================

import Header from "./components/Header";
import Footer from "./components/Footer";
import "./scss/index.scss";
import Main from "./components/Main";

function App() {
  return (
    <>
      <Header />
      <Main />
      <Footer />
    </>
  );
}

export default App;


